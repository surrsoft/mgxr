{"version":3,"sources":["consts.ts","utils/utils.tsx","api/airtable-api.ts","api/cards-api.ts","components/Card/index.tsx","components/RandomCardViewer/index.tsx","components/Settings/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CONF_AIRTABLE_BASE","CONF_AIRTABLE_TABLE_NAME","MGXR_LS_AIRTABLE_API_KEY","LSApiKey","localStorage","getItem","apiKey","str","length","test","setItem","TpCard","title","url","comm","body","id","tid","trans_count","MAirtable","apiKeyGet","dc","Airtable","default_config","endpointUrl","configure","alert","maxRecords","Promise","resolve","reject","ret","selectCfg","base","select","eachPage","records","fetchNextPage","forEach","record","push","err","console","error","fields","log","Date","now","updOj","update","CardsB","FIELD_ID","FIELD_TID","FIELD_TITLE","FIELD_URL","FIELD_COMM","FIELD_BODY","this","index","get","FIELD_TRANS_COUNT","card","recordUpdate","Card","props","handleLinkPress","bind","e","a","target","href","urlName","substr","className","onClick","rel","Component","RandomCardViewer","countShowed","countAll","handleShow","Settings","textInput","state","isLoading","React","createRef","setState","val","current","value","apiKeySet","type","ref","defaultValue","handleSave","customHistory","createBrowserHistory","init","App","cardsB","showedIxs","isApiKeySetted","errorStr","do","rnd","ix","arrExcept","_","isEmpty","random","arr0","ix0","some","el","randomExcept","arr1","getByIndex","recordsGet","countAllGet","statusCode","message","includes","Error","history","to","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"maAGaA,EAAqB,oBACrBC,EAA2B,OAE3BC,EAA2B,2BCH3BC,EAAb,8FACE,WACE,OAAOC,aAAaC,QAAQH,KAFhC,uBAKE,SAAiBI,GACf,UA4DiCC,EA5DRD,IA6DI,IAAfC,EAAIC,QAAgB,QAAQC,KAAKF,QA3DpCD,IACTF,aAAaM,QAAQR,EAA0BI,IACxC,IAwDN,IAA8BC,MAlErC,KAgBaI,EACX,WACWC,EACAC,EACAC,EACAC,EACAC,EACAC,GAER,IADQC,EACT,uDAD+B,EAC/B,yBAPSN,QAOT,KANSC,MAMT,KALSC,OAKT,KAJSC,OAIT,KAHSC,KAGT,KAFSC,MAET,KADSC,eAMX,IAAIP,EAAO,oGAAqB,iBAChC,IAAIA,EAAO,+DAAc,8BACzB,IAAIA,EAAO,gEAAe,mB,qBC9BfQ,EAAb,yFAEE,WACE,IAAMb,EAASH,EAASiB,YACxB,GAAKd,EAEE,CACL,IAAMe,EAAKC,IAASC,iBACpBF,EAAGf,OAASA,EACZe,EAAGG,YAAc,2BACjBF,IAASG,UAAUJ,QALnBK,MAAM,iDALZ,+DAkBE,uGAAwBC,EAAxB,+BAA6C,EAA7C,kBACS,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgB,GAChBC,EAAY,GACdL,EAAa,IAEfK,EAAUL,WAAaA,GAEzBL,IACGW,KAAKjC,EADRsB,CAC4BrB,GACzBiC,OAAOF,GACPG,UACC,SAAcC,EAASC,GACrBD,EAAQE,SAAQ,SAAUC,GACxBR,EAAIS,KAAKD,MAEXF,OAEF,SAAcI,GACRA,IACFC,QAAQC,MAAMF,GACdX,EAAOW,IAETZ,EAAQE,UAvBlB,2CAlBF,uHA+CE,WAA0Bd,EAAa2B,GAAvC,wEACEF,QAAQG,IAAR,2EAAgFC,KAAKC,QACrFL,QAAQG,IAAI,wCAAyC5B,GACrDyB,QAAQG,IAAI,2CAA4CD,GAH1D,kBAIS,IAAIhB,SAAQ,SAACC,EAASC,GAC3B,IAAMkB,EAAQ,CAAChC,GAAIC,EAAK2B,UACxBF,QAAQG,IAAI,0CAA2CG,GACvD1B,IACGW,KAAKjC,EADRsB,CAC4BrB,GACzBgD,OACC,CAACD,IACD,SAAUP,EAAUL,GACdK,GACFX,EAAOW,GAETZ,EAAQO,UAflB,2CA/CF,gECkBac,EAAb,WASE,WAAqBd,GAAoB,yBAApBA,UAAmB,KARhCe,SAAW,KAQqB,KAPhCC,UAAY,MAOoB,KANhCC,YAAc,QAMkB,KALhCC,UAAY,MAKoB,KAJhCC,WAAa,OAImB,KAHhCC,WAAa,OANvB,+CAYE,WACE,OAAOC,KAAKrB,QAAQ5B,SAbxB,wBAgBE,SAAWkD,GACT,IAAMnB,EAASkB,KAAKrB,QAAQsB,GAC5B,OAAO,IAAI/C,EACT4B,EAAOoB,IAAIF,KAAKJ,aAChBd,EAAOoB,IAAIF,KAAKH,WAChBf,EAAOoB,IAAIF,KAAKF,YAChBhB,EAAOoB,IAAIF,KAAKD,YAChBjB,EAAOoB,IAAIF,KAAKN,UAChBZ,EAAOvB,GACPuB,EAAOoB,IAAIT,EAAOU,uBAzBxB,4DA6BE,WAAoB3C,EAAa4C,GAAjC,8EACQjB,EADR,eAEKM,EAAOU,kBAAoBC,EAAK3C,YAAc,GAFnD,SAIQC,EAAU2C,aAAa7C,EAAK2B,GAJpC,2CA7BF,gEAAaM,EAOGU,kBAAoB,c,WC1BvBG,EAAb,kDACE,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IACDC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBAFD,EAD1B,0FAOE,WAAsBC,GAAtB,eAAAC,EAAA,6DACcD,EAAEE,OAAOC,KACdT,EAAQJ,KAAKO,MAAbH,KAFT,SAGQX,EAAOD,OAAOY,EAAK5C,IAAK4C,GAHhC,gDAPF,2EAaE,WAAU,IACDA,EAAQJ,KAAKO,MAAbH,KACP,IAAKA,EACH,OAAO,+CAGT,IAAIU,EAAUV,EAAKhD,IAMnB,OAJI0D,GAAWA,EAAQ/D,OADZ,KAET+D,EAAUA,EAAQC,OAAO,EAFhB,IAEyB,OAG5B,sBAAKC,UAAU,OAAf,UACN,qBAAKA,UAAU,cAAf,SAA8BZ,EAAKjD,QACnC,qBAAK6D,UAAU,aAAf,SACE,mBAAGH,KAAMT,EAAKhD,IAAK6D,QAASjB,KAAKQ,gBAAiBI,OAAO,SAASM,IAAI,sBAAtE,SAA6FJ,MAE/F,8BAAMV,EAAK/C,OACX,8BAAM+C,EAAK9C,OACX,qBAAK0D,UAAU,cAAf,SACE,0HAAuBZ,EAAK3C,wBAjCpC,GAA0B0D,aCCbC,G,OAAb,kDACE,WAAYb,GAAa,uCACjBA,GAFV,0CAKE,WACE,OAAQ,sBAAKS,UAAU,YAAf,UACN,qFAAgBhB,KAAKO,MAAMc,YAA3B,MAA2CrB,KAAKO,MAAMe,YACtD,wBAAQN,UAAU,oBAAoBC,QAASjB,KAAKO,MAAMgB,WAA1D,kBACCvB,KAAKO,MAAMH,KAAO,qBAAKY,UAAU,kBAAf,SAAiC,cAAC,EAAD,CAAMZ,KAAMJ,KAAKO,MAAMH,SAAgB,YATjG,GAAsCe,c,sBCAzBK,G,OAAb,kDAGE,WAAYjB,GAAa,IAAD,8BACtB,cAAMA,IAHAkB,eAEgB,EAEtB,EAAKC,MAAQ,CACX7E,OAAQ,GACR8E,WAAW,GAEb,EAAKF,UAAYG,IAAMC,YAND,EAH1B,qDAYE,WACE7B,KAAK8B,SAAS,CACZjF,OAAQH,EAASiB,YACjBgE,WAAW,MAfjB,wBAmBE,WAAc,IAAD,EACLI,EAAG,UAAG/B,KAAKyB,UAAUO,eAAlB,aAAG,EAAwBC,MAChCvF,EAASwF,UAAUH,IACrB/B,KAAK8B,SAAS,CAACjF,OAAQkF,IACvB9D,MAAM,UAENA,MAAM,mBAzBZ,oBA6BE,WAAU,IAAD,SACqB+B,KAAK0B,MAA1B7E,EADA,EACAA,OAAQ8E,EADR,EACQA,UACf,OAAQ,sBAAKX,UAAU,gBAAf,UACN,sINrCsB,OMsCtB,gCACE,uDACCW,EAAY,sBAAMX,UAAU,oBAAhB,yBAEV,iCACD,uBAAOA,UAAU,kBAAkBmB,KAAK,OAAOC,IAAKpC,KAAKyB,UAAWY,aAAcxF,IAClF,wBAAQmE,UAAU,mBAAmBC,QAAS,kBAAM,EAAKqB,cAAzD,+BAvCV,GAA8BnB,cCKxBoB,EAAgBC,cAEtB9E,EAAU+E,O,IA6FKC,E,kDAvFb,WAAYnC,GAAa,IAAD,8BACtB,cAAMA,IAHAoC,YAEgB,EAEtB,EAAKjB,MAAQ,CACXtB,KAAM,KACNiB,YAAa,EACbC,SAAU,EACVsB,UAAW,GACXjB,WAAW,EACXkB,gBAAgB,EAChBC,SAAU,IAEZ,EAAKC,GAAK,EAAKA,GAAGtC,KAAR,gBAXY,E,8CAcxB,WACE,IAAMuC,ENeH,SAAsBC,EAAYC,GACvC,GAAIC,IAAEC,QAAQF,GACZ,OAAOC,IAAEE,OAAOJ,GAGlB,IADA,IAAMK,EAAO,GAJuD,WAK3DC,GACIL,EAAUM,MAAK,SAAAC,GAAE,OAAIA,IAAOF,MAErCD,EAAKvE,KAAKwE,IAHLA,EAAM,EAAGA,GAAON,EAAIM,IAAQ,EAA5BA,GAMT,GAAID,EAAKvG,OAAUkG,EAAK,GAAsB,IAAhBK,EAAKvG,OACjC,OAAQ,EAEV,IAAMiG,EAAMG,IAAEE,OAAOC,EAAKvG,OAAS,GACnC,OAAOuG,EAAKN,GM9BEU,CAAa1D,KAAK0B,MAAMJ,SAAW,EAAGtB,KAAK0B,MAAMkB,WAC7D,IAAa,IAATI,EAAY,CACd,IAAMW,EAAI,sBAAO3D,KAAK0B,MAAMkB,WAAlB,CAA6BI,IACvChD,KAAK8B,SAAS,CACZ1B,KAAMJ,KAAK2C,OAAS3C,KAAK2C,OAAOiB,WAAWZ,GAAO,GAClD3B,YAAarB,KAAK0B,MAAML,YAAc,EACtCuB,UAAWe,O,gBAKjB,c,sEAGA,4BAAAhD,EAAA,0DACiBjE,EAASiB,YAD1B,iCAIMqC,KAAK8B,SAAS,CAACe,gBAAgB,IAJrC,SAM4BnF,EAAUmG,aANtC,OAMYlF,EANZ,OAOMqB,KAAK2C,OAAS,IAAIlD,EAAOd,GACzBqB,KAAK8B,SAAS,CACZH,WAAW,EACXL,SAAUtB,KAAK2C,OAAOmB,gBAV9B,qDAa6B,MAAnB,KAAIC,aAAsB,KAAIC,QAAQC,SAAS,yBAbzD,iBAcQjE,KAAK8B,SAAS,CAACgB,SAAU,6BAdjC,8BAgBc,IAAIoB,MAAJ,MAhBd,0D,0EAsBA,WAAU,IAAD,SACuClE,KAAK0B,MAA5CmB,EADA,EACAA,eAAgBlB,EADhB,EACgBA,UAAWmB,EAD3B,EAC2BA,SAClC,OACE,cAAC,IAAD,CAAQqB,QAAS5B,EAAjB,SACE,sBAAKvB,UAAU,MAAf,UACE,sBAAKA,UAAU,YAAf,UACE,cAAC,IAAD,CAAMoD,GAAG,IAAT,wDACA,cAAC,IAAD,CAAMA,GAAG,YAAT,uEAEF,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAArB,SAEIxB,EAAW,qBAAK9B,UAAU,oBAAf,SAAoC8B,IAC3CnB,EACD,8BAEGkB,EACE,6CACA,oFAGJ,cAAC,EAAD,CAAkBvB,SAAUtB,KAAK0B,MAAMJ,SAAUD,YAAarB,KAAK0B,MAAML,YACvDjB,KAAMJ,KAAK0B,MAAMtB,KACjBmB,WAAY,kBAAM,EAAKA,kBAGjD,cAAC,IAAD,CAAO8C,KAAK,YAAZ,SACE,cAAC,EAAD,kB,GAjFIzC,IAAMT,WCDToD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.f0fc92a1.chunk.js","sourcesContent":["export const MGXR_APP_REV = '3';\n\nexport const CONF_AIRTABLE_API_KEY = 'keyzbjKNgu52lb9D3';\nexport const CONF_AIRTABLE_BASE = 'appXv6ry7Vn262nGR';\nexport const CONF_AIRTABLE_TABLE_NAME = 'main';\n\nexport const MGXR_LS_AIRTABLE_API_KEY = 'mgxr_ls_airtable_api_key';\n","import _ from 'lodash';\nimport { MGXR_LS_AIRTABLE_API_KEY } from '../consts';\n\nexport class LSApiKey {\n  static apiKeyGet(): string | null {\n    return localStorage.getItem(MGXR_LS_AIRTABLE_API_KEY)\n  }\n\n  static apiKeySet(apiKey?: string): boolean {\n    if (isEmptyOrWhitespaces(apiKey)) {\n      return false\n    } else if (apiKey) {\n      localStorage.setItem(MGXR_LS_AIRTABLE_API_KEY, apiKey);\n      return true\n    }\n    return false\n  }\n}\n\nexport class TpCard {\n  constructor(\n    readonly title?: string,\n    readonly url?: string,\n    readonly comm?: string,\n    readonly body?: string,\n    readonly id?: string,\n    readonly tid?: string,\n    readonly trans_count: number = 0\n  ) {\n  }\n}\n\nexport const tpCards = [\n  new TpCard('Российская газета', 'https://rg.ru'),\n  new TpCard('Коммерсант', 'https://www.kommersant.ru/'),\n  new TpCard('РИА Новости', 'https://ria.ru/')\n]\n\n/**\n * Возвращает случайное число в диапазоне 0 .. (1) включая 0 и (1), но отсутствующее в (2).\n * Если такого случайного числа найти невозможно (из-за того что в (2) уже все индексы есть), то возвращает -1\n *\n * ID [[210219210500]], rev.2 1.1 2021-02-19\n *\n * @param ix (1) -- например 3\n * @param arrExcept -- например [0, 1]\n * @return например может вернуть только 2 или 3\n */\nexport function randomExcept(ix: number, arrExcept: [number]): number {\n  if (_.isEmpty(arrExcept)) {\n    return _.random(ix);\n  }\n  const arr0 = [];\n  for (let ix0 = 0; ix0 <= ix; ix0++) {\n    const b0 = arrExcept.some(el => el === ix0);\n    if (!b0) {\n      arr0.push(ix0)\n    }\n  }\n  if (arr0.length > (ix + 1) || arr0.length === 0) {\n    return -1\n  }\n  const rnd = _.random(arr0.length - 1);\n  return arr0[rnd];\n}\n\n/**\n * ID [210217114100], rev.1.0 2021-02-17\n */\nexport function isEmptyOrWhitespaces(str?: string) {\n  return (!str || str.length === 0 || /^\\s*$/.test(str))\n}\n\n","import Airtable from 'airtable';\nimport Record from 'airtable/lib/record';\nimport { CONF_AIRTABLE_BASE, CONF_AIRTABLE_TABLE_NAME } from '../consts';\nimport { LSApiKey } from '../utils/utils';\n\nexport class MAirtable {\n\n  static init() {\n    const apiKey = LSApiKey.apiKeyGet()\n    if (!apiKey) {\n      alert('please add \"Airtable API Key\" at \"Settings\"')\n    } else {\n      const dc = Airtable.default_config()\n      dc.apiKey = apiKey\n      dc.endpointUrl = 'https://api.airtable.com'\n      Airtable.configure(dc)\n    }\n  }\n\n  /**\n   *\n   * @param maxRecords -- максимальное количество записей которое нужно вернуть, задействуется если > 0\n   */\n  static async recordsGet(maxRecords: number = 0): Promise<Record[]> {\n    return new Promise((resolve, reject) => {\n      const ret: Record[] = [];\n      const selectCfg = {}\n      if (maxRecords > 0) {\n        // @ts-ignore\n        selectCfg.maxRecords = maxRecords\n      }\n      Airtable\n        .base(CONF_AIRTABLE_BASE)(CONF_AIRTABLE_TABLE_NAME)\n        .select(selectCfg)\n        .eachPage(\n          function page(records, fetchNextPage) {\n            records.forEach(function (record) {\n              ret.push(record)\n            });\n            fetchNextPage();\n          },\n          function done(err) {\n            if (err) {\n              console.error(err);\n              reject(err)\n            }\n            resolve(ret)\n          }\n        )\n    });\n  }\n\n  static async recordUpdate(tid: number, fields: any) {\n    console.log(`!!-!!-!! 0003-10 -> :::::::::::::: recordUpdate() {210222000258}:${Date.now()}`); // del+\n    console.log('!!-!!-!! 0003-20 tid {210222000307}\\n', tid); // del+\n    console.log('!!-!!-!! 0003-30 fields {210222000322}\\n', fields); // del+\n    return new Promise((resolve, reject) => {\n      const updOj = {id: tid, fields}\n      console.log('!!-!!-!! 0003-40 updOj {210222000414}\\n', updOj); // del+\n      Airtable\n        .base(CONF_AIRTABLE_BASE)(CONF_AIRTABLE_TABLE_NAME)\n        .update(\n          [updOj],\n          function (err: any, records: Record[] | undefined) {\n            if (err) {\n              reject(err);\n            }\n            resolve(records);\n          }\n        )\n    });\n  }\n}\n","import cards from './cards.json';\nimport { TpCard } from '../utils/utils';\nimport Record from 'airtable/lib/record';\nimport { MAirtable } from './airtable-api';\n\nexport class Cards {\n  static allGet(): TpCard[] {\n    // @ts-ignore\n    return cards.cards.map(el => {\n      return el\n    })\n  }\n\n  static countAllGet(): number {\n    return cards.cards.length\n  }\n\n  static getByIndex(index: number): TpCard {\n    // @ts-ignore\n    return cards.cards[index]\n  }\n}\n\nexport class CardsB {\n  private FIELD_ID = 'id';\n  private FIELD_TID = 'tid';\n  private FIELD_TITLE = 'title';\n  private FIELD_URL = 'url';\n  private FIELD_COMM = 'comm';\n  private FIELD_BODY = 'body';\n  public static FIELD_TRANS_COUNT = 'trans_count';\n\n  constructor(readonly records: Record[]) {\n  }\n\n  countAllGet(): number {\n    return this.records.length\n  }\n\n  getByIndex(index: number): TpCard {\n    const record = this.records[index]\n    return new TpCard(\n      record.get(this.FIELD_TITLE),\n      record.get(this.FIELD_URL),\n      record.get(this.FIELD_COMM),\n      record.get(this.FIELD_BODY),\n      record.get(this.FIELD_ID),\n      record.id,\n      record.get(CardsB.FIELD_TRANS_COUNT),\n    )\n  }\n\n  static async update(tid: number, card: TpCard) {\n    const fields = {\n      [CardsB.FIELD_TRANS_COUNT]: card.trans_count + 1\n    }\n    await MAirtable.recordUpdate(tid, fields)\n  }\n\n}\n","import { Component } from 'react';\nimport './card.css';\nimport { CardsB } from '../../api/cards-api';\n\nexport class Card extends Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.handleLinkPress = this.handleLinkPress.bind(this);\n  }\n\n  // @ts-ignore\n  async handleLinkPress(e) {\n    const url = e.target.href;\n    const {card} = this.props;\n    await CardsB.update(card.tid, card);\n  }\n\n  render() {\n    const {card} = this.props;\n    if (!card) {\n      return <div>card is null</div>\n    }\n    // --- обрезка отображаемого url\n    let urlName = card.url;\n    const ln = 47;\n    if (urlName && urlName.length > ln) {\n      urlName = urlName.substr(0, ln) + '...';\n    }\n    // ---\n    return (<div className=\"card\">\n      <div className=\"card__title\">{card.title}</div>\n      <div className=\"card__link\">\n        <a href={card.url} onClick={this.handleLinkPress} target=\"_blank\" rel=\"noopener noreferrer\">{urlName}</a>\n      </div>\n      <div>{card.comm}</div>\n      <div>{card.body}</div>\n      <div className=\"card__infos\">\n        <div>Число переходов: {card.trans_count}</div>\n      </div>\n    </div>);\n  }\n\n\n}\n","import { Component } from 'react';\nimport { Card } from '../Card';\nimport './styles.css'\n\n\nexport class RandomCardViewer extends Component<any, any> {\n  constructor(props: any) {\n    super(props);\n  }\n\n  render() {\n    return (<div className=\"rc-viewer\">\n      <div>Показано: {this.props.countShowed} / {this.props.countAll}</div>\n      <button className=\"rc-viewer__button\" onClick={this.props.handleShow}>Show</button>\n      {this.props.card ? <div className=\"rc-viewer__card\"><Card card={this.props.card}/></div> : null}\n    </div>);\n  }\n}\n","import React, { Component } from 'react';\nimport './styles.css'\nimport { LSApiKey } from '../../utils/utils';\nimport { MGXR_APP_REV } from '../../consts';\n\nexport class Settings extends Component<any, any> {\n  private textInput: React.RefObject<HTMLInputElement>;\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      apiKey: '',\n      isLoading: true\n    }\n    this.textInput = React.createRef();\n  }\n\n  componentDidMount() {\n    this.setState({\n      apiKey: LSApiKey.apiKeyGet(),\n      isLoading: false\n    })\n  }\n\n  handleSave() {\n    const val = this.textInput.current?.value\n    if (LSApiKey.apiKeySet(val)) {\n      this.setState({apiKey: val})\n      alert('saved')\n    } else {\n      alert('invalid value')\n    }\n  }\n\n  render() {\n    const {apiKey, isLoading} = this.state;\n    return (<div className=\"app__settings\">\n      <div>Версия приложения: {MGXR_APP_REV}</div>\n      <div>\n        <label>Airtable API Key: </label>\n        {isLoading ? <span className=\"settings__loading\">Loading ...</span>\n          :\n          (<span>\n          <input className=\"settings__input\" type=\"text\" ref={this.textInput} defaultValue={apiKey}/>\n          <button className=\"settings__button\" onClick={() => this.handleSave()}>Save</button>\n        </span>)\n        }\n      </div>\n    </div>)\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport { RandomCardViewer } from './components/RandomCardViewer';\nimport { LSApiKey, randomExcept } from './utils/utils';\nimport { CardsB } from './api/cards-api';\nimport { Link, Route, Router, Switch } from 'react-router-dom';\nimport { createBrowserHistory } from \"history\";\nimport { MAirtable } from './api/airtable-api';\nimport { Settings } from './components/Settings';\n\nconst customHistory = createBrowserHistory();\n\nMAirtable.init();\n\n\nclass App extends React.Component<any, any> {\n  private cardsB?: CardsB;\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      card: null,\n      countShowed: 0,\n      countAll: 0,\n      showedIxs: [],\n      isLoading: true,\n      isApiKeySetted: false,\n      errorStr: ''\n    }\n    this.do = this.do.bind(this);\n  }\n\n  handleShow() {\n    const rnd = randomExcept(this.state.countAll - 1, this.state.showedIxs);\n    if (rnd !== -1) {\n      const arr1 = [...this.state.showedIxs, rnd];\n      this.setState({\n        card: this.cardsB ? this.cardsB.getByIndex(rnd) : {},\n        countShowed: this.state.countShowed + 1,\n        showedIxs: arr1\n      })\n    }\n  }\n\n  do() {\n  }\n\n  async componentDidMount() {\n    const apiKey = LSApiKey.apiKeyGet()\n    if (apiKey) {\n      try {\n        this.setState({isApiKeySetted: true});\n        // ---\n        const records = await MAirtable.recordsGet();\n        this.cardsB = new CardsB(records);\n        this.setState({\n          isLoading: false,\n          countAll: this.cardsB.countAllGet()\n        });\n      } catch (err) {\n        if (err.statusCode === 401 && err.message.includes('provide valid api key')) {\n          this.setState({errorStr: 'invalid Airtable API Key'})\n        } else {\n          throw new Error(err);\n        }\n      }\n    }\n  }\n\n  render() {\n    const {isApiKeySetted, isLoading, errorStr} = this.state;\n    return (\n      <Router history={customHistory}>\n        <div className=\"App\">\n          <div className=\"appRoutes\">\n            <Link to=\"/\">Главная</Link>\n            <Link to=\"/settings\">Настройки</Link>\n          </div>\n          <Switch>\n            <Route path=\"/\" exact>\n              {\n                errorStr ? <div className=\"app__error_string\">{errorStr}</div>\n                  : isLoading ?\n                  (<div>\n                    {\n                      isApiKeySetted ?\n                        <div>Loading...</div> :\n                        <div>please provide \"Airtable API Key\" at \"Settings\"</div>\n                    }\n                  </div>)\n                  : <RandomCardViewer countAll={this.state.countAll} countShowed={this.state.countShowed}\n                                      card={this.state.card}\n                                      handleShow={() => this.handleShow()}/>\n              }\n            </Route>\n            <Route path=\"/settings\">\n              <Settings/>\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}