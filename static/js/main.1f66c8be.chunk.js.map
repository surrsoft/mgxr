{"version":3,"sources":["consts.ts","utils/utils.tsx","api/airtable-api.ts","components/Settings/index.tsx","api/hogg/connections/HoggOffsetCount.ts","api/hogg/base-implements/BaseTuple.ts","api/hogg/base-implements/BaseCell.ts","api/hogg/utils/HoggResult.ts","api/hogg/connections/HoggConnectionAirtable.ts","components/PageDebug/index.tsx","components/Card/index.tsx","api/cards-api.ts","components/RandomCardViewer/index.tsx","consts-uarw.tsx","components/PageNews/index.tsx","utils/uarw/uarw-utils.ts","components/PageUarw/index.tsx","components/PageUarw/QCard/ToggleProgresses/index.tsx","components/PageUarw/QCard/index.tsx","utils/uarw/uarw-logic.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CONF_AIRTABLE_DB_NAME","CONF_AIRTABLE_TABLE_NAME","MGXR_LS_AIRTABLE_API_KEY","LSApiKey","localStorage","getItem","apiKey","str","length","test","setItem","TpCard","title","url","comm","body","id","tid","trans_count","trans_date_last","show_date_last","randomExcept","ix","arrExcept","_","isEmpty","random","arr0","ix0","some","el","push","rnd","utilPathGet","name","MAirtable","apiKeyGet","dc","Airtable","default_config","endpointUrl","configure","alert","maxRecords","Promise","resolve","reject","ret","selectCfg","base","select","eachPage","records","fetchNextPage","forEach","record","err","console","error","fields","updOj","update","Settings","props","textInput","state","isLoading","React","createRef","this","setState","val","current","value","apiKeySet","className","type","ref","defaultValue","onClick","handleSave","Component","HoggOffsetCount","getAll","offset","count","BaseTuple","cells","cell","BaseCell","columnName","HoggResult","code","HoggConnectionAirtable","dbName","columnNames","tableName","pFilterVusc","filter","offsetCount","a","pageSize","filterByFormula","counter","table","tup","convertRecord","options","Error","tuples","log","Date","now","updConfsGet","updConfs","isOk","message","createData","updConfsAtCreateGet","create","ids","destroy","cees","Object","entries","key","cee","tidCee","every","tuple","cellsGet","updConf","fieldName","columnNameGet","valueGet","PageDebug","connection","init","columns","query","cellAdd","delete","db","nx","DateFieldShow","dateSt","dayjs","diff","Card","handleLinkPress","bind","extend","relativeTime","isBetween","e","card","handleLinkClick","href","target","rel","CardsB","FIELD_ID","FIELD_TID","FIELD_TITLE","FIELD_URL","FIELD_COMM","FIELD_BODY","index","get","FIELD_TRANS_COUNT","FIELD_TRANS_DATE_LAST","FIELD_SHOW_DATE_LAST","recordUpdate","UARW_COLUMN_NAME","UARW_PROGRESSES","RandomCardViewer","cardHandleLinkClick","card0","format","countShowed","countAll","handleShow","PageNews","cardsB","showedIxs","isApiKeySetted","errorStr","arr1","getByIndex","recordsGet","countAllGet","statusCode","includes","colination","arr","sortByCount","currElem","find","retEl","ValCount","needSort","sort","b","ascending","valCounts","map","valCount","ValLabel","SortInfo","label","arrObjectsSortByStringProp","arrObjectsBack","propName","oj1","oj2","v1","v2","selectOptionToVusc","option","values","b51","Array","isArray","PROGRESS","P1","stJoin","join","SelectMode","RandomMode","ToggleProgresses","ToggleButtonGroup","currValue","onChange","size","vls","vl","ToggleButton","disabled","disable","loading","ReactMarkdown","require","QCard","P2","P3","P4","P5","progressesChange","qcard","qcardProgressChange","progressDisable","res","progressValue","answerShowed","progress","scope","question","handleClick","answer","errMsg","UarwLogic","filterVusc","connectionTableCreate","data","uarwTuples","UarwTuples","qcards","SCOPES","scopes","progresses","b19","scopesVC","progressesVC","cardTid","conn","TID","QCardOj","createMulti","pgs","QUESTION","ANSWER","ID","fnOptionsRefresh","currSelectOption","newVL","np","PageUarw","uarwLogic","hadleQCardProgressChange","qcardTid","newProgress","qcardProgressUpdate","hoggResult","qcardWithErr","JSON","stringify","randomModeChange","mode","randomMode","loaded","loadedScopes","scopesSelectMode","errStr","selectScOptions","selectScSelectedOption","selectPrOptions","selectPrSelectedOption","selectMode","STRICT","A","selectScHandleChange","selectPrHandleChange","handleShowCards","selectModeChange","selectorsDataGetAndUpdate","fnFilterVuscGet","scopesAndProgressesGet","scopesVL","asValLabels","progressesVL","newSelectScSelectedOption","newSelectPrSelectedOption","newState","selectedOption","selectHandleChange","qcardsGet","qcardOjs","Math","B","filterScVusc","filterPrVusc","FREE","position","top","isMulti","variant","fnRandomModeCommentGet","Button","showRandomHandle","text","customHistory","createBrowserHistory","App","history","to","activeClassName","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f66c8be.chunk.js","sourcesContent":["export const MGXR_APP_REV = '7';\n\nexport const CONF_AIRTABLE_DB_NAME = 'appXv6ry7Vn262nGR';\nexport const CONF_AIRTABLE_TABLE_NAME = 'main';\n\nexport const MGXR_LS_AIRTABLE_API_KEY = 'mgxr_ls_airtable_api_key';\n","import _ from 'lodash';\nimport { MGXR_LS_AIRTABLE_API_KEY } from '../consts';\n\nexport class LSApiKey {\n  static apiKeyGet(): string | null {\n    return localStorage.getItem(MGXR_LS_AIRTABLE_API_KEY)\n  }\n\n  static apiKeySet(apiKey?: string): boolean {\n    if (isEmptyOrWhitespaces(apiKey)) {\n      return false\n    } else if (apiKey) {\n      localStorage.setItem(MGXR_LS_AIRTABLE_API_KEY, apiKey);\n      return true\n    }\n    return false\n  }\n}\n\nexport class TpCard {\n  constructor(\n    readonly title?: string,\n    readonly url?: string,\n    readonly comm?: string,\n    readonly body?: string,\n    readonly id?: string,\n    readonly tid?: string,\n    readonly trans_count: number = 0,\n    readonly trans_date_last?: string,\n    readonly show_date_last?: string,\n  ) {\n  }\n}\n\nexport const tpCards = [\n  new TpCard('Российская газета', 'https://rg.ru'),\n  new TpCard('Коммерсант', 'https://www.kommersant.ru/'),\n  new TpCard('РИА Новости', 'https://ria.ru/')\n]\n\n/**\n * Возвращает случайное число в диапазоне 0 .. (1) включая 0 и (1), но отсутствующее в (2).\n * Если такого случайного числа найти невозможно (из-за того что в (2) уже все индексы есть), то возвращает -1\n *\n * ID [[210219210500]], rev.2 1.1 2021-02-19\n *\n * @param ix (1) -- например 3\n * @param arrExcept -- например [0, 1]\n * @return например может вернуть только 2 или 3\n */\nexport function randomExcept(ix: number, arrExcept: [number]): number {\n  if (_.isEmpty(arrExcept)) {\n    return _.random(ix);\n  }\n  const arr0 = [];\n  for (let ix0 = 0; ix0 <= ix; ix0++) {\n    const b0 = arrExcept.some(el => el === ix0);\n    if (!b0) {\n      arr0.push(ix0)\n    }\n  }\n  if (arr0.length > (ix + 1) || arr0.length === 0) {\n    return -1\n  }\n  const rnd = _.random(arr0.length - 1);\n  return arr0[rnd];\n}\n\n/**\n * ID [210217114100], rev.1.0 2021-02-17\n */\nexport function isEmptyOrWhitespaces(str?: string) {\n  return (!str || str.length === 0 || /^\\s*$/.test(str))\n}\n\nexport function utilPathGet(name?: string): string[] {\n  if (!name) {\n    return [\"/\", \"/mgxr\"]\n  }\n  return [`/${name}`, `/mgxr/${name}`]\n}\n","import Airtable from 'airtable';\nimport Record from 'airtable/lib/record';\nimport { CONF_AIRTABLE_DB_NAME, CONF_AIRTABLE_TABLE_NAME } from '../consts';\nimport { LSApiKey } from '../utils/utils';\n\nexport class MAirtable {\n\n  static init() {\n    const apiKey = LSApiKey.apiKeyGet()\n    if (!apiKey) {\n      alert('please add \"Airtable API Key\" at \"Settings\"')\n    } else {\n      const dc = Airtable.default_config()\n      dc.apiKey = apiKey\n      dc.endpointUrl = 'https://api.airtable.com'\n      Airtable.configure(dc)\n    }\n  }\n\n  /**\n   *\n   * @param maxRecords -- максимальное количество записей которое нужно вернуть, задействуется если > 0\n   */\n  static async recordsGet(maxRecords: number = 0): Promise<Record[]> {\n    return new Promise((resolve, reject) => {\n      const ret: Record[] = [];\n      const selectCfg = {}\n      if (maxRecords > 0) {\n        // @ts-ignore\n        selectCfg.maxRecords = maxRecords\n      }\n      Airtable\n        .base(CONF_AIRTABLE_DB_NAME)(CONF_AIRTABLE_TABLE_NAME)\n        .select(selectCfg)\n        .eachPage(\n          function page(records, fetchNextPage) {\n            records.forEach(function (record) {\n              ret.push(record)\n            });\n            fetchNextPage();\n          },\n          function done(err) {\n            if (err) {\n              console.error(err);\n              reject(err)\n            }\n            resolve(ret)\n          }\n        )\n    });\n  }\n\n  static async recordUpdate(tid: string, fields: any) {\n    return new Promise((resolve, reject) => {\n      const updOj = {id: tid, fields}\n      Airtable\n        .base(CONF_AIRTABLE_DB_NAME)(CONF_AIRTABLE_TABLE_NAME)\n        .update(\n          [updOj],\n          function (err: any, records: Record[] | undefined) {\n            if (err) {\n              reject(err);\n            }\n            resolve(records);\n          }\n        )\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport './styles.css'\nimport { LSApiKey } from '../../utils/utils';\nimport { MGXR_APP_REV } from '../../consts';\n\nexport class Settings extends Component<any, any> {\n  private textInput: React.RefObject<HTMLInputElement>;\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      apiKey: '',\n      isLoading: true\n    }\n    this.textInput = React.createRef();\n  }\n\n  componentDidMount() {\n    this.setState({\n      apiKey: LSApiKey.apiKeyGet(),\n      isLoading: false\n    })\n  }\n\n  handleSave() {\n    const val = this.textInput.current?.value\n    if (LSApiKey.apiKeySet(val)) {\n      this.setState({apiKey: val})\n      alert('saved')\n    } else {\n      alert('invalid value')\n    }\n  }\n\n  render() {\n    const {apiKey, isLoading} = this.state;\n    return (<div className=\"app__settings\">\n      <div>Версия приложения: {MGXR_APP_REV}</div>\n      <div>\n        <label>Airtable API Key: </label>\n        {isLoading ? <span className=\"settings__loading\">Loading ...</span>\n          :\n          (<span>\n          <input className=\"settings__input\" type=\"text\" ref={this.textInput} defaultValue={apiKey}/>\n          <button className=\"settings__button\" onClick={() => this.handleSave()}>Save</button>\n        </span>)\n        }\n      </div>\n    </div>)\n  }\n}\n","export class HoggOffsetCount {\n  /**\n   *\n   * @param getAll (1) -- если TRUE, то это означает \"получить все записи\", тогда параметры (2), (3) должны\n   * игнорироваться\n   * @param offset (2) -- количество записей которые нужно пропустить\n   * набор\n   * @param count (3) -- количество записей которое нужно вернуть\n   */\n  constructor(\n    readonly getAll: boolean = false,\n    readonly offset: number = 0,\n    readonly count: number = 20\n  ) {\n  }\n}\n","import { HoggTupleNT } from '../interfaces/HoggTupleNT';\nimport { HoggCellNT } from '../interfaces/HoggCellNT';\n\nexport class BaseTuple implements HoggTupleNT {\n  private cells: HoggCellNT[] = [];\n\n  create(cells: HoggCellNT[]): HoggTupleNT {\n    this.cells = cells;\n    return this;\n  }\n\n  cellsGet(): HoggCellNT[] {\n    return this.cells;\n  }\n\n  cellAdd(cell: HoggCellNT): HoggTupleNT {\n    this.cells.push(cell);\n    return this;\n  }\n\n}\n","import { HoggCellNT } from '../interfaces/HoggCellNT';\n\nexport class BaseCell implements HoggCellNT {\n  private columnName: string = '';\n  private value: string = '';\n\n  create(columnName: string, value: string): HoggCellNT {\n    this.columnName = columnName;\n    this.value = value;\n    return this;\n  }\n\n  columnNameGet(): string {\n    return this.columnName;\n  }\n\n  valueGet(): string {\n    return this.value;\n  }\n\n}\n","/**\n * Если value === TRUE то это означает успешный результат, иначе в code содержится код ошибки, а в comm - комментарий\n */\nexport class HoggResult<T> {\n  constructor(readonly value: T, readonly code: string = '', readonly comm: string = '') {\n  }\n}\n","import { HoggConnectionNT } from '../interfaces/HoggConnectionNT';\nimport { HoggTupleNT } from '../interfaces/HoggTupleNT';\nimport Airtable from 'airtable';\nimport Record from 'airtable/lib/record';\nimport { HoggCellNT } from '../interfaces/HoggCellNT';\nimport { BaseTuple } from '../base-implements/BaseTuple';\nimport { BaseCell } from '../base-implements/BaseCell';\nimport { HoggOffsetCount } from './HoggOffsetCount';\nimport { HoggResult } from '../utils/HoggResult';\n\n\nexport class HoggConnectionAirtable implements HoggConnectionNT {\n\n  private dbName: string = '';\n  private columnNames: string[] = [];\n  private tableName: string = '';\n  // [vusc]\n  private pFilterVusc: string = '';\n\n  db(dbName: string): HoggConnectionNT {\n    this.dbName = dbName;\n    return this;\n  }\n\n  table(tableName: string): HoggConnectionNT {\n    this.tableName = tableName;\n    return this;\n  }\n\n  columns(columnNames: string[]): HoggConnectionNT {\n    this.columnNames = columnNames;\n    return this;\n  }\n\n  filterVusc(filter: string): HoggConnectionNT {\n    this.pFilterVusc = filter;\n    return this;\n  }\n\n  private static convertRecord(record: Record): HoggTupleNT {\n    const {fields} = record;\n    const cees: HoggCellNT[] = [];\n    for (const [key, value] of Object.entries(fields)) {\n      const cee: HoggCellNT = new BaseCell().create(key, value as string);\n      cees.push(cee);\n    }\n    const tidCee = new BaseCell().create('tid', record.id);\n    cees.push(tidCee);\n    return new BaseTuple().create(cees);\n  }\n\n  // TODO учесть columnNames\n  async query(offsetCount: HoggOffsetCount): Promise<HoggTupleNT[]> {\n    return new Promise((resolve, reject) => {\n      const ret: HoggTupleNT[] = [];\n      const selectCfg = {}\n      if (!offsetCount.getAll) {\n        const maxRecords = offsetCount.offset + offsetCount.count;\n        if (maxRecords > 0) {\n          // @ts-ignore\n          selectCfg.maxRecords = maxRecords;\n          // @ts-ignore\n          selectCfg.pageSize = maxRecords > 100 ? 100 : maxRecords;\n        }\n      }\n      if (this.columnNames && this.columnNames.length > 0) {\n        // @ts-ignore\n        selectCfg.fields = this.columnNames;\n      }\n      if (this.pFilterVusc) {\n        // @ts-ignore\n        selectCfg.filterByFormula = this.pFilterVusc;\n      }\n      let counter = 0;\n      Airtable\n        .base(this.dbName)\n        .table(this.tableName)\n        .select(selectCfg)\n        .eachPage(\n          function page(records, fetchNextPage) {\n            records.forEach(function (record) {\n              counter++;\n              if (counter > offsetCount.offset) {\n                const tup = HoggConnectionAirtable.convertRecord(record);\n                ret.push(tup)\n              }\n            });\n            fetchNextPage();\n          },\n          function done(err) {\n            if (err) {\n              console.error(err);\n              reject(err)\n            }\n            resolve(ret)\n          }\n        )\n    });\n  }\n\n  init(options: { apiKey: string }): void {\n    const {apiKey} = options;\n    if (apiKey) {\n      const dc = Airtable.default_config()\n      dc.apiKey = apiKey\n      dc.endpointUrl = 'https://api.airtable.com'\n      Airtable.configure(dc)\n    } else {\n      throw new Error(`[hogg]: [[210223092909]] invalid apiKey [${apiKey}]`)\n    }\n  }\n\n  /**\n   * Среди ячеек в (1) должна быть ячейка с именем столбца 'tid'\n   * @param tuples\n   */\n  async update(tuples: HoggTupleNT[]): Promise<HoggResult<boolean>> {\n    console.log(`!!-!!-!! 2357-10 -> :::::::::::::: update() {210302235749}:${Date.now()}`); // del+\n    if (!(tuples && tuples.length > 0)) {\n      return new HoggResult<boolean>(false, '[[210223170254]]', 'tuples is empty')\n    } else {\n      // ---\n      const {updConfs, isOk} = updConfsGet(tuples);\n      // ---\n      if (!isOk) {\n        return new HoggResult(false, '[[210223191902]]', 'tid problem')\n      }\n      try {\n        return new Promise((resolve, reject) => {\n          Airtable\n            .base(this.dbName)\n            .table(this.tableName)\n            .update(updConfs, (err: any) => {\n              console.log('!!-!!-!! 2357-20 err {210302235801}\\n', err); // del+\n              if (err) {\n                resolve(new HoggResult(false, '[[210223202024]]', err.message))\n              } else {\n                resolve(new HoggResult<boolean>(true))\n              }\n            })\n        });\n      } catch (e) {\n        return new HoggResult<boolean>(false, '[[210223193709]]', e.message)\n      }\n    }\n  }\n\n  async create(tuples: HoggTupleNT[]): Promise<HoggResult<boolean>> {\n    if (!(tuples && tuples.length > 0)) {\n      return new HoggResult<boolean>(false, '[[210223170254-2]]', 'tuples is empty')\n    } else {\n      // ---\n      const createData = updConfsAtCreateGet(tuples);\n      // ---\n      try {\n        await Airtable\n          .base(this.dbName)\n          .table(this.tableName)\n          .create(createData, function (err: any) {\n            if (err) {\n              return new HoggResult(false, '[[210223202024-2]]', err.message)\n            }\n          })\n        return new HoggResult<boolean>(true)\n      } catch (e) {\n        return new HoggResult<boolean>(false, '[[210223193709-2]]', e.message)\n      }\n    }\n  }\n\n  async delete(ids: string[]): Promise<HoggResult<boolean>> {\n    await Airtable\n      .base(this.dbName)\n      .table(this.tableName)\n      .destroy(ids, function (err: any) {\n        if (err) {\n          return new HoggResult(false, '[[210223202024-3]]', err.message)\n        }\n      })\n    return new HoggResult(true)\n  }\n\n}\n\nfunction updConfsGet(tuples: HoggTupleNT[]) {\n  const updConfs: any[] = [];\n  const isOk = tuples.every(tuple => { // LOOP\n    const cells: HoggCellNT[] = tuple.cellsGet();\n    const updConf: any = {id: '', fields: {}}\n    cells.forEach(cell => { // LOOP-2\n      const fieldName = cell.columnNameGet()\n      if (fieldName === 'tid') {\n        updConf.id = cell.valueGet();\n      } else {\n        updConf.fields[fieldName] = cell.valueGet()\n      }\n    }) // LOOP-2\n    if (!updConf.id) {\n      return false; // stop loop\n    }\n    updConfs.push(updConf);\n    return true;\n  }) // LOOP\n  return {updConfs, isOk};\n}\n\nfunction updConfsAtCreateGet(tuples: HoggTupleNT[]) {\n  const updConfs: any[] = [];\n  tuples.forEach(tuple => { // LOOP\n    const cells: HoggCellNT[] = tuple.cellsGet();\n    const updConf: any = {fields: {}}\n    cells.forEach(cell => { // LOOP-2\n      const fieldName = cell.columnNameGet()\n      updConf.fields[fieldName] = cell.valueGet()\n    }) // LOOP-2\n    updConfs.push(updConf);\n    return true;\n  }) // LOOP\n  return updConfs;\n}\n","import { Component } from 'react';\nimport './styles.css';\nimport { LSApiKey } from '../../utils/utils';\nimport { CONF_AIRTABLE_DB_NAME, CONF_AIRTABLE_TABLE_NAME } from '../../consts';\nimport { HoggTupleNT } from '../../api/hogg/interfaces/HoggTupleNT';\nimport { HoggOffsetCount } from '../../api/hogg/connections/HoggOffsetCount';\nimport { HoggConnectionAirtable } from '../../api/hogg/connections/HoggConnectionAirtable';\nimport { HoggResult } from '../../api/hogg/utils/HoggResult';\nimport { BaseCell } from '../../api/hogg/base-implements/BaseCell';\nimport { BaseTuple } from '../../api/hogg/base-implements/BaseTuple';\n\nexport class PageDebug extends Component<any, any> {\n  private connection?: HoggConnectionAirtable;\n\n  async query() {\n    const connection = new HoggConnectionAirtable();\n    connection.init({apiKey: LSApiKey.apiKeyGet() || ''})\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const res: HoggTupleNT[] | undefined = await this.connection\n      ?.columns(['id'])\n      .query(new HoggOffsetCount(false, 0, 10));\n  }\n\n  async update() {\n    const tuple = new BaseTuple()\n      .cellAdd(new BaseCell().create('tid', 'rec04BflzOVX54PWs'))\n      .cellAdd(new BaseCell().create('comm', '1-1-3'))\n    // ---\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const res: HoggResult<boolean> | undefined = await this.connection?.update([tuple])\n  }\n\n  async create() {\n    const tuples = [\n      new BaseTuple().cellAdd(new BaseCell().create('title', 'mmm')).cellAdd(new BaseCell().create('comm', '1-1-4')),\n      new BaseTuple().cellAdd(new BaseCell().create('title', 'mmm-2')).cellAdd(new BaseCell().create('comm', '1-1-5'))\n    ]\n    // ---\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const res: HoggResult<boolean> | undefined = await this.connection?.create(tuples)\n  }\n\n  async delete() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const res = await this.connection?.delete(['recgsvfjiB1rDtNP5', 'recNGoZaZe7pPfzOH'])\n  }\n\n  componentDidMount() {\n    this.connection = new HoggConnectionAirtable();\n    this.connection.init({apiKey: LSApiKey.apiKeyGet() || ''});\n    this.connection\n      .db(CONF_AIRTABLE_DB_NAME)\n      .table(CONF_AIRTABLE_TABLE_NAME);\n  }\n\n  nx() {\n    return (\n      <div>\n        <button onClick={() => this.query()}>Query</button>\n        <button onClick={() => this.update()}>Update</button>\n        <button onClick={() => this.create()}>Create</button>\n        <button onClick={() => this.delete()}>Delete</button>\n      </div>\n    )\n  }\n\n  render() {\n    return <div className=\"page_debug\">{\n      this.nx()\n    }</div>\n  }\n}\n","import { Component } from 'react';\nimport './card.css';\nimport { TpCard } from '../../utils/utils';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport isBetween from 'dayjs/plugin/isBetween';\n\nexport interface CardProps {\n  card: TpCard,\n  handleLinkClick: (card: TpCard) => void\n}\n\nfunction DateFieldShow(name: string, dateSt?: string) {\n  return (<div>\n    {name}: {dateSt ?\n    (`${dateSt} (прошло дней: ${dayjs().diff(dateSt, 'day')})`)\n    : '-'}\n  </div>)\n}\n\nexport class Card extends Component<CardProps, any> {\n\n  constructor(props: CardProps) {\n    super(props);\n    this.handleLinkPress = this.handleLinkPress.bind(this);\n    dayjs.extend(relativeTime)\n    dayjs.extend(isBetween)\n  }\n\n  // @ts-ignore\n  async handleLinkPress(e) {\n    const {card, handleLinkClick} = this.props;\n    handleLinkClick(card);\n  }\n\n  render() {\n    const {card} = this.props;\n    if (!card) {\n      return <div>card is null</div>\n    }\n    // ---\n    return (<div className=\"card\">\n      <div className=\"card__title\">{card.title}</div>\n      <div className=\"card__link\">\n        <a\n          href={card.url}\n          onClick={this.handleLinkPress}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\">\n          {card.url}\n        </a>\n      </div>\n      <div>{card.comm}</div>\n      <div>{card.body}</div>\n      <div className=\"card__infos\">\n        <div>Число переходов: {card.trans_count}</div>\n        {DateFieldShow('Дата последнего перехода: ', card.trans_date_last)}\n        {DateFieldShow('Дата последнего показа: ', card.show_date_last)}\n      </div>\n    </div>);\n  }\n\n}\n","import cards from './cards.json';\nimport { TpCard } from '../utils/utils';\nimport Record from 'airtable/lib/record';\nimport { MAirtable } from './airtable-api';\n\nexport class Cards {\n  static allGet(): TpCard[] {\n    // @ts-ignore\n    return cards.cards.map(el => {\n      return el\n    })\n  }\n\n  static countAllGet(): number {\n    return cards.cards.length\n  }\n\n  static getByIndex(index: number): TpCard {\n    // @ts-ignore\n    return cards.cards[index]\n  }\n}\n\nexport class CardsB {\n  private FIELD_ID = 'id';\n  private FIELD_TID = 'tid';\n  private FIELD_TITLE = 'title';\n  private FIELD_URL = 'url';\n  private FIELD_COMM = 'comm';\n  private FIELD_BODY = 'body';\n  public static FIELD_TRANS_COUNT = 'trans_count';\n  // type - Date\n  public static FIELD_TRANS_DATE_LAST = 'trans_date_last';\n  public static FIELD_SHOW_DATE_LAST = 'show_date_last';\n\n  constructor(readonly records: Record[]) {\n  }\n\n  countAllGet(): number {\n    return this.records.length\n  }\n\n  // [[210222111416]]\n  getByIndex(index: number): TpCard {\n    const record = this.records[index]\n    return new TpCard(\n      record.get(this.FIELD_TITLE),\n      record.get(this.FIELD_URL),\n      record.get(this.FIELD_COMM),\n      record.get(this.FIELD_BODY),\n      record.get(this.FIELD_ID),\n      record.id,\n      record.get(CardsB.FIELD_TRANS_COUNT),\n      record.get(CardsB.FIELD_TRANS_DATE_LAST),\n      record.get(CardsB.FIELD_SHOW_DATE_LAST),\n    )\n  }\n\n  static async update(tid: string, card: TpCard) {\n    const fields = {\n      [CardsB.FIELD_TRANS_COUNT]: card.trans_count + 1,\n      [CardsB.FIELD_TRANS_DATE_LAST]: card.trans_date_last,\n      [CardsB.FIELD_SHOW_DATE_LAST]: card.show_date_last,\n    }\n    await MAirtable.recordUpdate(tid, fields)\n  }\n\n}\n","import { Component } from 'react';\nimport { Card } from '../Card';\nimport './styles.css'\nimport { TpCard } from '../../utils/utils';\nimport { CardsB } from '../../api/cards-api';\nimport dayjs from 'dayjs';\n\n\nexport class RandomCardViewer extends Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.cardHandleLinkClick.bind(this);\n  }\n\n  async cardHandleLinkClick(card: TpCard) {\n    const card0 = {\n      ...card,\n      [CardsB.FIELD_TRANS_DATE_LAST]: dayjs(Date.now()).format('YYYY-MM-DD')\n    }\n    await CardsB.update(card.tid || '', card0);\n  }\n\n  render() {\n    return (<div className=\"rc-viewer\">\n      <div>Показано: {this.props.countShowed} / {this.props.countAll}</div>\n      <button className=\"rc-viewer__button\" onClick={this.props.handleShow}>Show</button>\n      {\n        this.props.card ?\n          <div className=\"rc-viewer__card\">\n            <Card\n              card={this.props.card}\n              handleLinkClick={this.cardHandleLinkClick}\n            />\n          </div>\n          : null\n      }\n    </div>);\n  }\n}\n","export const UARW_CONF_AIRTABLE_DB_NAME = 'appL0eof6VFTiPyjm';\nexport const UARW_CONF_AIRTABLE_TABLE_NAME = 'main';\n// export const UARW_CONF_AIRTABLE_TABLE_NAME = 'main-test';\n\n// --- airtable fields\nexport enum UARW_COLUMN_NAME {\n  SCOPES = 'scopes',\n  QUESTION = 'question',\n  ANSWER = 'answer',\n  PROGRESS = 'progress',\n  TID = 'tid',\n  ID = 'id',\n}\n\n// --- field \"progress\" values\nexport enum UARW_PROGRESSES {\n  P1 = '1',\n  P2 = '2',\n  P3 = '3',\n  P4 = '4',\n  P5 = '5'\n}\n","import React, { Component } from 'react';\nimport './styles.css';\nimport { RandomCardViewer } from '../RandomCardViewer';\nimport { CardsB } from '../../api/cards-api';\nimport { LSApiKey, randomExcept, TpCard } from '../../utils/utils';\nimport dayjs from 'dayjs';\nimport { MAirtable } from '../../api/airtable-api';\n\nexport class PageNews extends Component<any, any> {\n\n  private cardsB?: CardsB;\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      card: null,\n      countShowed: 0,\n      countAll: 0,\n      showedIxs: [],\n      isLoading: true,\n      isApiKeySetted: false,\n      errorStr: ''\n    }\n  }\n\n  async handleShow() {\n    const rnd = randomExcept(this.state.countAll - 1, this.state.showedIxs);\n    if (rnd !== -1) {\n      const arr1 = [...this.state.showedIxs, rnd];\n      if (this.cardsB) {\n        const card: TpCard = this.cardsB.getByIndex(rnd);\n        this.setState({\n          card,\n          countShowed: this.state.countShowed + 1,\n          showedIxs: arr1\n        })\n        // ---\n        const card0 = {...card, [CardsB.FIELD_SHOW_DATE_LAST]: dayjs().format('YYYY-MM-DD')};\n        await CardsB.update(card.tid || '', card0);\n      }\n    }\n  }\n\n  async componentDidMount() {\n    const apiKey = LSApiKey.apiKeyGet()\n    if (apiKey) {\n      try {\n        this.setState({isApiKeySetted: true});\n        // ---\n        // [[210222113321]]\n        const records = await MAirtable.recordsGet();\n        this.cardsB = new CardsB(records);\n        this.setState({\n          isLoading: false,\n          countAll: this.cardsB.countAllGet()\n        });\n      } catch (err) {\n        if (err.statusCode === 401 && err.message.includes('provide valid api key')) {\n          this.setState({errorStr: 'invalid Airtable API Key'})\n        } else {\n          throw new Error(err);\n        }\n      }\n    }\n  }\n\n  render() {\n    const {isApiKeySetted, isLoading, errorStr} = this.state;\n    // ---\n    return (\n      <div>{\n        errorStr ? <div className=\"app__error_string\">{errorStr}</div>\n          : isLoading ?\n          (<div>\n            {\n              isApiKeySetted ?\n                <div>Loading...</div> :\n                <div>please provide \"Airtable API Key\" at \"Settings\"</div>\n            }\n          </div>)\n          : <RandomCardViewer countAll={this.state.countAll} countShowed={this.state.countShowed}\n                              card={this.state.card}\n                              handleShow={() => this.handleShow()}/>\n      }\n      </div>\n    )\n\n  }\n}\n","import { UARW_COLUMN_NAME, UARW_PROGRESSES } from '../../consts-uarw';\n\nexport function colination(arr: string[], sortByCount?: SortInfo): ValCount[] {\n  const ret: ValCount[] = [];\n  if (arr && arr.length > 0) {\n    arr.forEach(val => {\n      const currElem = ret.find(retEl => retEl.value === val)\n      if (!currElem) {\n        ret.push(new ValCount(val, 1))\n      } else {\n        currElem.count++\n      }\n    })\n    // ---\n    if (sortByCount && sortByCount.needSort) {\n      ret.sort((a, b) => {\n        if (sortByCount.ascending) {\n          return a.count - b.count\n        }\n        return b.count - a.count\n      })\n    }\n  }\n  return ret;\n}\n\nexport class ValCount {\n  public count: number;\n\n  constructor(readonly value: string, count: number) {\n    this.count = count;\n  }\n\n  static asValLabels(valCounts: ValCount[]): ValLabel[] {\n    return valCounts.map(valCount => {\n      return new ValLabel(valCount.value, `${valCount.value} (${valCount.count})`)\n    })\n  }\n\n}\n\nexport class SortInfo {\n  constructor(readonly needSort: boolean = false, readonly ascending: boolean = true) {\n  }\n}\n\nexport class ValLabel {\n  constructor(readonly value: string, readonly label: string) {\n  }\n}\n\nexport function arrObjectsSortByStringProp(arrObjectsBack: object[], propName: string, ascending: boolean = true): void {\n  arrObjectsBack.sort((oj1, oj2) => {\n    // @ts-ignore\n    const v1 = oj1[propName];\n    // @ts-ignore\n    const v2 = oj2[propName];\n    if (v1 < v2) {\n      return ascending ? -1 : 1\n    }\n    if (v1 > v2) {\n      return ascending ? 1 : -1\n    }\n    return 0\n  })\n}\n\nexport function selectOptionToVusc(fieldName: string, option: { value: string } | { value: string }[] | null): string {\n  // --- values\n  const values = [];\n  let b51 = false;\n  if (option) {\n    if (Array.isArray(option)) {\n      option.forEach(el => {\n        values.push(el.value)\n        if (fieldName === UARW_COLUMN_NAME.PROGRESS && el.value === UARW_PROGRESSES.P1) {\n          b51 = true;\n        }\n      })\n    } else {\n      values.push(option.value)\n      if (fieldName === UARW_COLUMN_NAME.PROGRESS && option.value === UARW_PROGRESSES.P1) {\n        b51 = true;\n      }\n    }\n  }\n  // ---\n  const arr = values.map(val => `{${fieldName}} = '${val}'`)\n  if (b51) {\n    arr.push(`{${fieldName}} = ''`)\n  }\n  const stJoin = arr.join(', ')\n  return arr.length > 0 ? `OR(${stJoin})` : ''\n}\n","import { Component } from 'react';\nimport Loader from 'react-loader';\nimport { selectOptionToVusc, ValCount, ValLabel } from '../../utils/uarw/uarw-utils';\nimport Select from 'react-select';\nimport './styles.scss'\nimport { QCard } from './QCard';\nimport { QCardOj, UarwLogic, UarwTuples } from '../../utils/uarw/uarw-logic';\nimport { Button, ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\nimport { UARW_COLUMN_NAME, UARW_PROGRESSES } from '../../consts-uarw';\nimport { HoggResult } from '../../api/hogg/utils/HoggResult';\n\ninterface UarwState {\n  uarwTuples: UarwTuples | null,\n  loaded: boolean,\n  loadedScopes: boolean,\n  scopesSelectMode: boolean,\n  errStr: string,\n  selectScOptions: object[],\n  selectScSelectedOption: object | object[] | null,\n  selectPrOptions: object[],\n  selectPrSelectedOption: object | object[] | null,\n  qcards: QCardOj[],\n  countAll: number,\n  selectMode: number,\n  randomMode: number,\n}\n\nenum SelectMode {\n  STRICT = 1,\n  FREE = 2\n}\n\nenum RandomMode {\n  /**\n   * Показать все карточки в случайном порядке\n   */\n  A = 1,\n  B\n}\n\nfunction fnOptionsRefresh(currSelectOption: object | object[] | null, newVL: ValLabel[]): object | object[] | null {\n  if (currSelectOption && newVL && newVL.length > 0) {\n    if (Array.isArray(currSelectOption)) {\n      return currSelectOption.map(el => {\n        // @ts-ignore\n        const np = newVL.find(nx => nx.value === el.value)\n        return np ? np : el\n      })\n    } else {\n      // @ts-ignore\n      const np = newVL.find(nx => nx.value === currSelectOption.value)\n      return np ? np : currSelectOption\n    }\n  }\n  return currSelectOption\n}\n\nexport class PageUarw extends Component<any, UarwState> {\n  private uarwLogic?: UarwLogic;\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      loaded: false,\n      loadedScopes: false,\n      scopesSelectMode: true,\n      uarwTuples: null,\n      errStr: '',\n      selectScOptions: [],\n      selectScSelectedOption: null,\n      selectPrOptions: [],\n      selectPrSelectedOption: null,\n      qcards: [],\n      countAll: 0,\n      selectMode: SelectMode.STRICT,\n      randomMode: RandomMode.A,\n    }\n    this.selectScHandleChange = this.selectScHandleChange.bind(this);\n    this.selectPrHandleChange = this.selectPrHandleChange.bind(this);\n    this.handleShowCards = this.handleShowCards.bind(this);\n    this.selectModeChange = this.selectModeChange.bind(this);\n  }\n\n  hadleQCardProgressChange = async (qcardTid: string, newProgress: UARW_PROGRESSES): Promise<boolean> => {\n    console.log(`!!-!!-!! -> :::::::::::::: hadleQCardProgressChange() {210302225851}:${Date.now()}`); // del+\n    // --- обновление прогресса *карточки на сервере\n    const hoggResult: HoggResult<boolean> = await UarwLogic.qcardProgressUpdate(qcardTid, newProgress)\n    console.log('!!-!!-!! hoggResult {210302225339}\\n', hoggResult); // del+\n    // ---\n    if (!hoggResult.value) {\n      const qcardWithErr = this.state.qcards.find(qcard => qcard.tid === qcardTid)\n      if (qcardWithErr) {\n        qcardWithErr.errMsg = JSON.stringify(hoggResult);\n        console.log('!!-!!-!! qcardWithErr {210303001137}\\n', qcardWithErr); // del+\n        this.setState({qcards: [...this.state.qcards]})\n        return false\n      }\n    }\n    return true\n  }\n\n  async componentDidMount() {\n    this.setState({loaded: true});\n    this.uarwLogic = new UarwLogic();\n    await this.selectorsDataGetAndUpdate();\n  }\n\n  /**\n   * Получение списка *скоупов и *прогрессов, в соответствии с выбранными в текущий момент *скоупами и *прогрессами\n   * @private\n   */\n  private async selectorsDataGetAndUpdate() {\n    if (this.uarwLogic) {\n      try {\n        this.setState({loadedScopes: false})\n        // ---\n        // получение текущих *скоупов/*прогрессов и формирование на их базе [vusc]-строки\n        const filterVusc = this.fnFilterVuscGet();\n        const {scopes, progresses, countAll} = await this.uarwLogic.scopesAndProgressesGet(filterVusc);\n        this.setState({loadedScopes: true, countAll});\n        // ---\n        const scopesVL: ValLabel[] = ValCount.asValLabels(scopes)\n        const progressesVL: ValLabel[] = ValCount.asValLabels(progresses)\n        // ---\n        const newSelectScSelectedOption = fnOptionsRefresh(this.state.selectScSelectedOption, scopesVL)\n        const newSelectPrSelectedOption = fnOptionsRefresh(this.state.selectPrSelectedOption, progressesVL)\n        const newState = {\n          selectScOptions: scopesVL,\n          selectScSelectedOption: newSelectScSelectedOption,\n          selectPrOptions: progressesVL,\n          selectPrSelectedOption: newSelectPrSelectedOption\n        };\n        this.setState(newState)\n      } catch (err) {\n        this.setState({errStr: err.message})\n      }\n    }\n  }\n\n  async selectScHandleChange(selectedOption: any) {\n    this.setState({selectScSelectedOption: selectedOption, qcards: []}, async () => {\n      await this.selectHandleChange()\n    })\n  }\n\n  async selectPrHandleChange(selectedOption: any) {\n    this.setState({selectPrSelectedOption: selectedOption, qcards: []}, async () => {\n      await this.selectHandleChange()\n    })\n  }\n\n  async selectHandleChange() {\n    if (this.state.selectMode === SelectMode.STRICT) {\n      await this.selectorsDataGetAndUpdate();\n    }\n  }\n\n  async handleShowCards(random: boolean = false) {\n    try {\n      this.setState({loaded: false});\n      let filterVusc = this.fnFilterVuscGet();\n      const qcardOjs = await this.uarwLogic?.qcardsGet(filterVusc);\n      if (random) {\n        if (this.state.randomMode === RandomMode.A) {\n          qcardOjs?.sort(() => Math.random() - 0.5)\n        }\n        if (this.state.randomMode === RandomMode.B) {\n          alert('no realised!')\n        }\n      }\n      this.setState({\n        qcards: qcardOjs || [],\n        loaded: true,\n      })\n    } catch (err) {\n      this.setState({loaded: true, errStr: err.message})\n    }\n  }\n\n  private fnFilterVuscGet() {\n    let filterScVusc = selectOptionToVusc(UARW_COLUMN_NAME.SCOPES, this.state.selectScSelectedOption as { value: string });\n    let filterPrVusc = selectOptionToVusc(UARW_COLUMN_NAME.PROGRESS, this.state.selectPrSelectedOption as { value: string });\n    if (filterScVusc && filterPrVusc) {\n      return `AND(${filterScVusc}, ${filterPrVusc})`\n    } else if (filterScVusc) {\n      return filterScVusc\n    } else {\n      return filterPrVusc\n    }\n  }\n\n  async selectModeChange(mode: SelectMode) {\n    this.setState({\n      selectMode: mode,\n      selectScSelectedOption: null,\n      selectPrSelectedOption: null,\n      qcards: []\n    }, () => {\n      if (mode === SelectMode.FREE) {\n        this.selectorsDataGetAndUpdate()\n      }\n    })\n  }\n\n  render() {\n    const {\n      selectScOptions,\n      selectScSelectedOption,\n      selectPrOptions,\n      selectPrSelectedOption,\n      qcards,\n      countAll\n    } = this.state;\n    return <div>\n      {this.state.errStr\n        ? <div>{this.state.errStr}</div>\n        :\n        <div className=\"uarw-container\">\n          <div className=\"cards-count\">Карточек: {countAll}</div>\n          <Loader loaded={this.state.loadedScopes} position=\"relative\" top=\"30px\">\n            <div className=\"selects-container\">\n              <Select\n                className=\"select-scopes\"\n                value={selectScSelectedOption}\n                options={selectScOptions}\n                onChange={this.selectScHandleChange}\n                isMulti\n              />\n              <Select\n                className=\"select-progresses\"\n                value={selectPrSelectedOption}\n                options={selectPrOptions}\n                onChange={this.selectPrHandleChange}\n                isMulti\n              />\n              <ToggleButtonGroup\n                className=\"select-mode\"\n                name=\"value\"\n                type=\"radio\"\n                value={this.state.selectMode}\n                onChange={this.selectModeChange}\n              >\n                <ToggleButton value={SelectMode.STRICT} variant=\"secondary\" size=\"sm\">strict</ToggleButton>\n                <ToggleButton value={SelectMode.FREE} variant=\"secondary\" size=\"sm\">free</ToggleButton>\n              </ToggleButtonGroup>\n            </div>\n            <div className=\"random-mode-container\">\n              <div>random mode:</div>\n              <ToggleButtonGroup\n                className=\"random-mode-select\"\n                name=\"value\"\n                type=\"radio\"\n                value={this.state.randomMode}\n                onChange={this.randomModeChange}\n              >\n                <ToggleButton value={RandomMode.A} variant=\"secondary\" size=\"sm\">A</ToggleButton>\n                <ToggleButton value={RandomMode.B} variant=\"secondary\" size=\"sm\">B</ToggleButton>\n              </ToggleButtonGroup>\n              {this.fnRandomModeCommentGet()}\n            </div>\n            <div className=\"buttons\">\n              <div className=\"show-random-btn\">\n                <Button\n                  variant=\"success\"\n                  size=\"sm\"\n                  onClick={() => this.showRandomHandle()}\n                  disabled={this.state.randomMode === RandomMode.B}\n                >show random</Button>\n              </div>\n              <div className=\"get-button\">\n                <Button onClick={() => this.handleShowCards()} variant=\"success\" size=\"sm\">show all</Button>\n              </div>\n            </div>\n          </Loader>\n          <Loader loaded={this.state.loaded} position='relative'>\n            <div className=\"qcards\">\n              {\n                qcards.map((qcard, index) => {\n                  return <QCard\n                    key={index}\n                    qcard={qcard}\n                    qcardProgressChange={this.hadleQCardProgressChange}\n                  />\n                })\n              }\n            </div>\n          </Loader>\n        </div>\n      }\n    </div>\n  }\n\n  private fnRandomModeCommentGet() {\n    let text = '';\n    switch (this.state.randomMode) {\n      case RandomMode.A:\n        text = 'показ всех карточек, в случайном порядке'\n        break;\n      case RandomMode.B:\n        text = '-';\n        break;\n    }\n    return <div className=\"cls2121\">{text}</div>\n  }\n\n  randomModeChange = (mode: RandomMode) => {\n    this.setState({randomMode: mode})\n  }\n\n  async showRandomHandle() {\n    await this.handleShowCards(true)\n  }\n}\n","import { Component } from 'react';\nimport './styles.scss';\nimport { ToggleButton, ToggleButtonGroup } from 'react-bootstrap';\nimport { UARW_PROGRESSES } from '../../../../consts-uarw';\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nclass Props {\n  vls: { value: string, label: string }[] = []\n  currValue: string = UARW_PROGRESSES.P1\n  onChange?: (val: string) => void = () => {\n  }\n  disable: boolean = false\n}\n\nclass State {\n\n}\n\nexport class ToggleProgresses extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    return <div className=\"cls2255-container\">\n      <ToggleButtonGroup\n        name=\"value\"\n        type=\"radio\"\n        value={this.props.currValue}\n        onChange={this.props.onChange}\n        size=\"sm\"\n      >\n        {\n          this.props.vls.map((vl, index) => {\n            return <ToggleButton key={index} value={vl.value} disabled={this.props.disable}>\n              {vl.label}\n            </ToggleButton>\n          })\n        }\n      </ToggleButtonGroup>\n      <div className=\"cls2255-spinner\">\n        <ClipLoader loading={this.props.disable} size={16}/>\n      </div>\n    </div>\n  }\n}\n","import { Component } from 'react';\nimport './styles.scss';\nimport { QCardOj } from '../../../utils/uarw/uarw-logic';\nimport { ToggleProgresses } from './ToggleProgresses';\nimport {\n  UARW_PROGRESSES,\n} from '../../../consts-uarw';\n\nconst ReactMarkdown = require('react-markdown');\n\nclass QCardProps {\n  qcard?: QCardOj\n  qcardProgressChange?: (qcardTid: string, newProgress: UARW_PROGRESSES) => Promise<boolean>\n}\n\nclass QCardState {\n  answerShowed: boolean = false\n  progressValue: string = UARW_PROGRESSES.P1\n  progressDisable: boolean = false\n}\n\nexport class QCard extends Component<QCardProps, QCardState> {\n  private vls: { value: string, label: string }[] = [\n    {value: UARW_PROGRESSES.P1, label: UARW_PROGRESSES.P1},\n    {value: UARW_PROGRESSES.P2, label: UARW_PROGRESSES.P2},\n    {value: UARW_PROGRESSES.P3, label: UARW_PROGRESSES.P3},\n    {value: UARW_PROGRESSES.P4, label: UARW_PROGRESSES.P4},\n    {value: UARW_PROGRESSES.P5, label: UARW_PROGRESSES.P5},\n  ];\n\n  constructor(props: QCardProps) {\n    super(props);\n    this.state = {\n      answerShowed: false,\n      progressValue: this.props.qcard?.progress || UARW_PROGRESSES.P1,\n      progressDisable: false\n    }\n  }\n\n  handleClick() {\n    this.setState({answerShowed: true})\n  }\n\n  progressesChange = async (val: string) => {\n    console.log(`!!-!!-!! -> :::::::::::::: progressesChange() {210301223647}:${Date.now()}`); // del+\n    console.log('!!-!!-!! val {210301223735}\\n', val); // del+\n    console.log('!!-!!-!! qcard {210302214154}\\n', this.props.qcard); // del+\n    if (this.props.qcardProgressChange) {\n      this.setState({progressDisable: true});\n      const res = await this.props.qcardProgressChange(this.props.qcard?.tid || '', val as UARW_PROGRESSES);\n      console.log('!!-!!-!! res {210303002044}\\n', res); // del+\n      this.setState({progressDisable: false});\n      if (res) {\n        this.setState({progressValue: val})\n      }\n    }\n  }\n\n  render() {\n    const {qcard} = this.props;\n    const {answerShowed} = this.state;\n    return (\n      <div className=\"qcard\">\n        <div className=\"qcard__scope\">{qcard?.scope}</div>\n        <ReactMarkdown className=\"qcard__question\">{qcard?.question}</ReactMarkdown>\n        <input className=\"qcard__button\" type=\"button\" value=\"show answer\" onClick={() => this.handleClick()}/>\n        {!answerShowed || <ReactMarkdown className=\"qcard__answer\">{this.props.qcard?.answer}</ReactMarkdown>}\n        <div className=\"toggle-progresses\">\n          <ToggleProgresses\n            vls={this.vls}\n            currValue={this.state.progressValue}\n            onChange={this.progressesChange}\n            disable={this.state.progressDisable}\n          />\n        </div>\n        {this.props.qcard?.errMsg && <div className=\"err-msg\">{this.props.qcard?.errMsg}</div>}\n      </div>\n    )\n  }\n}\n","import { HoggTupleNT } from '../../api/hogg/interfaces/HoggTupleNT';\nimport {\n  UARW_COLUMN_NAME,\n  UARW_CONF_AIRTABLE_DB_NAME,\n  UARW_CONF_AIRTABLE_TABLE_NAME,\n  UARW_PROGRESSES\n} from '../../consts-uarw';\nimport { arrObjectsSortByStringProp, colination, SortInfo, ValCount } from './uarw-utils';\nimport { HoggConnectionAirtable } from '../../api/hogg/connections/HoggConnectionAirtable';\nimport { LSApiKey } from '../utils';\nimport { HoggOffsetCount } from '../../api/hogg/connections/HoggOffsetCount';\nimport { HoggConnectionNT } from '../../api/hogg/interfaces/HoggConnectionNT';\nimport { BaseTuple } from '../../api/hogg/base-implements/BaseTuple';\nimport { BaseCell } from '../../api/hogg/base-implements/BaseCell';\nimport { HoggResult } from '../../api/hogg/utils/HoggResult';\n\nexport class UarwLogic {\n\n  private static connectionTableCreate(): HoggConnectionNT {\n    const connection = new HoggConnectionAirtable();\n    const apiKey = LSApiKey.apiKeyGet() || '';\n    connection.init({apiKey});\n    return connection\n      .db(UARW_CONF_AIRTABLE_DB_NAME)\n      .table(UARW_CONF_AIRTABLE_TABLE_NAME)\n  }\n\n  async qcardsGet(filterVusc: string): Promise<QCardOj[]> {\n    const data: HoggTupleNT[] = await UarwLogic.connectionTableCreate()\n      .filterVusc(filterVusc)\n      .query(new HoggOffsetCount(true))\n    const uarwTuples = new UarwTuples(data)\n    return uarwTuples.qcards\n  }\n\n  static async qcardProgressUpdate(cardTid: string, progress: UARW_PROGRESSES): Promise<HoggResult<boolean>> {\n    const conn = UarwLogic.connectionTableCreate();\n    const tuple = new BaseTuple()\n      .cellAdd(new BaseCell().create(UARW_COLUMN_NAME.TID, cardTid))\n      .cellAdd(new BaseCell().create(UARW_COLUMN_NAME.PROGRESS, progress))\n    const res = await conn.update([tuple])\n    console.log('!!-!!-!! res {210302224128}\\n', res); // del+\n    return res;\n  }\n\n  async scopesAndProgressesGet(filterVusc: string = ''): Promise<{ scopes: ValCount[], progresses: ValCount[], countAll: number }> {\n    const tuples = await UarwLogic.connectionTableCreate()\n      .columns([UARW_COLUMN_NAME.SCOPES, UARW_COLUMN_NAME.PROGRESS])\n      .filterVusc(filterVusc)\n      .query(new HoggOffsetCount(true))\n    // ---\n    const scopes: string[] = []\n    const progresses: string[] = []\n    tuples.forEach(tuple => {\n      let b19 = false;\n      tuple.cellsGet().forEach(cell => {\n        const columnName = cell.columnNameGet();\n        const value = cell.valueGet();\n        if (columnName === UARW_COLUMN_NAME.SCOPES) {\n          scopes.push(value)\n        }\n        if (columnName === UARW_COLUMN_NAME.PROGRESS) {\n          progresses.push(value)\n          b19 = true\n        }\n      })\n      if (!b19) {\n        progresses.push(UARW_PROGRESSES.P1)\n      }\n    })\n    // ---\n    const scopesVC = colination(scopes, new SortInfo(false))\n    arrObjectsSortByStringProp(scopesVC, 'value', true)\n    const progressesVC = colination(progresses, new SortInfo(false))\n    arrObjectsSortByStringProp(progressesVC, 'value', true)\n    // ---\n    return {scopes: scopesVC, progresses: progressesVC, countAll: tuples.length}\n  }\n}\n\nexport class UarwTuples {\n  public qcards: QCardOj[];\n\n  constructor(readonly tuples: HoggTupleNT[]) {\n    this.qcards = QCardOj.createMulti(this.tuples)\n  }\n\n  scopesGet(): ValCount[] {\n    const scopes: string[] = [];\n    this.tuples.forEach(tuple => {\n      tuple.cellsGet().forEach(cell => {\n        const columnName = cell.columnNameGet()\n        const value = cell.valueGet()\n        if (columnName === UARW_COLUMN_NAME.SCOPES) {\n          scopes.push(value)\n        }\n      })\n    })\n    // ---\n    return colination(scopes, new SortInfo(true, false))\n  }\n\n  progressesGet(): ValCount[] {\n    const pgs: string[] = [];\n    this.tuples.forEach(tuple => {\n      tuple.cellsGet().forEach(cell => {\n        const columnName = cell.columnNameGet()\n        const value = cell.valueGet()\n        if (columnName === UARW_COLUMN_NAME.PROGRESS) {\n          pgs.push(value)\n        }\n      })\n    })\n    // ---\n    const valCounts = colination(pgs);\n    arrObjectsSortByStringProp(valCounts, 'value', true);\n    return valCounts\n  }\n\n}\n\nexport class QCardOj {\n  question: string = ''\n  answer: string = ''\n  progress: string = ''\n  scope: string = ''\n  id: string = ''\n  tid: string = ''\n  errMsg: string = ''\n\n  static create(tuple: HoggTupleNT): QCardOj {\n    const cells = tuple.cellsGet()\n    const qcard = new QCardOj();\n    cells.forEach(cell => {\n      const columnName = cell.columnNameGet()\n      const value = cell.valueGet()\n      switch (columnName) {\n        case UARW_COLUMN_NAME.QUESTION:\n          qcard.question = value;\n          break;\n        case UARW_COLUMN_NAME.ANSWER:\n          qcard.answer = value;\n          break;\n        case UARW_COLUMN_NAME.PROGRESS:\n          qcard.progress = value;\n          break;\n        case UARW_COLUMN_NAME.SCOPES:\n          qcard.scope = value;\n          break;\n        case UARW_COLUMN_NAME.TID:\n          qcard.tid = value;\n          break;\n        case UARW_COLUMN_NAME.ID:\n          qcard.id = value;\n          break;\n      }\n    })\n    if (!qcard.progress) {\n      qcard.progress = UARW_PROGRESSES.P1;\n    }\n    return qcard\n  }\n\n  static createMulti(tuples: HoggTupleNT[]): QCardOj[] {\n    return tuples.map(tuple => QCardOj.create(tuple))\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport { utilPathGet } from './utils/utils';\nimport { NavLink, Route, Router, Switch } from 'react-router-dom';\nimport { createBrowserHistory } from \"history\";\nimport { MAirtable } from './api/airtable-api';\nimport { Settings } from './components/Settings';\nimport { PageDebug } from './components/PageDebug';\nimport { PageNews } from './components/PageNews';\nimport { PageUarw } from './components/PageUarw';\n\nconst customHistory = createBrowserHistory();\n\nMAirtable.init();\n\nclass App extends React.Component<any, any> {\n\n  render() {\n\n    return (\n      <Router history={customHistory}>\n        <div className=\"App\">\n          <div className=\"appRoutes\">\n            <NavLink to=\"/mgxr\" activeClassName=\"active-link\">Главная</NavLink>\n            <NavLink to=\"/uarw\" activeClassName=\"active-link\">\"Карточки\"</NavLink>\n            <NavLink to=\"/news\" activeClassName=\"active-link\">\"Новости\"</NavLink>\n            <NavLink to=\"/settings\" activeClassName=\"active-link\">Настройки</NavLink>\n            <NavLink to=\"/debug\" activeClassName=\"active-link\">Debug</NavLink>\n          </div>\n          {/* // --- */}\n          <Switch>\n            <Route path={utilPathGet()} exact>\n              <div>Главная</div>\n            </Route>\n            <Route path={utilPathGet('settings')} exact>\n              <Settings/>\n            </Route>\n            <Route path={utilPathGet('debug')} exact>\n              <PageDebug/>\n            </Route>\n            <Route path={utilPathGet('news')} exact>\n              <PageNews/>\n            </Route>\n            <Route path={utilPathGet('uarw')} exact>\n              <PageUarw/>\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}