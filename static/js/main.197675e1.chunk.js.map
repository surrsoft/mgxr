{"version":3,"sources":["components/Card/index.tsx","consts.ts","utils/utils.tsx","api/airtable-api.ts","api/cards-api.ts","components/RandomCardViewer/index.tsx","components/Settings/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Card","props","handleLinkPress","bind","e","a","this","card","handleLinkClick","urlName","url","length","substr","className","title","href","onClick","target","rel","comm","body","trans_count","Component","CONF_AIRTABLE_BASE","CONF_AIRTABLE_TABLE_NAME","MGXR_LS_AIRTABLE_API_KEY","LSApiKey","localStorage","getItem","apiKey","str","test","setItem","TpCard","id","tid","MAirtable","apiKeyGet","dc","Airtable","default_config","endpointUrl","configure","alert","maxRecords","Promise","resolve","reject","ret","selectCfg","base","select","eachPage","records","fetchNextPage","forEach","record","push","err","console","error","fields","log","Date","now","updOj","update","CardsB","FIELD_ID","FIELD_TID","FIELD_TITLE","FIELD_URL","FIELD_COMM","FIELD_BODY","index","get","FIELD_TRANS_COUNT","recordUpdate","RandomCardViewer","cardHandleLinkClick","countShowed","countAll","handleShow","Settings","textInput","state","isLoading","React","createRef","setState","val","current","value","apiKeySet","type","ref","defaultValue","handleSave","customHistory","createBrowserHistory","init","App","cardsB","showedIxs","isApiKeySetted","errorStr","do","rnd","ix","arrExcept","_","isEmpty","random","arr0","ix0","some","el","randomExcept","arr1","getByIndex","recordsGet","countAllGet","statusCode","message","includes","Error","history","to","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.197675e1.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './card.css';\nimport { TpCard } from '../../utils/utils';\n\nexport interface CardProps {\n  card: TpCard,\n  handleLinkClick: (card: TpCard) => void\n}\n\nexport class Card extends Component<CardProps, any> {\n\n  constructor(props: CardProps) {\n    super(props);\n    this.handleLinkPress = this.handleLinkPress.bind(this);\n  }\n\n  // @ts-ignore\n  async handleLinkPress(e) {\n    const {card, handleLinkClick} = this.props;\n    handleLinkClick(card);\n  }\n\n  render() {\n    const {card} = this.props;\n    if (!card) {\n      return <div>card is null</div>\n    }\n    // --- обрезка отображаемого url\n    let urlName = card.url;\n    const ln = 47;\n    if (urlName && urlName.length > ln) {\n      urlName = urlName.substr(0, ln) + '...';\n    }\n    // ---\n    return (<div className=\"card\">\n      <div className=\"card__title\">{card.title}</div>\n      <div className=\"card__link\">\n        <a\n          href={card.url}\n          onClick={this.handleLinkPress}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\">\n          {urlName}\n        </a>\n      </div>\n      <div>{card.comm}</div>\n      <div>{card.body}</div>\n      <div className=\"card__infos\">\n        <div>Число переходов: {card.trans_count}</div>\n      </div>\n    </div>);\n  }\n\n}\n","export const MGXR_APP_REV = '4';\n\nexport const CONF_AIRTABLE_API_KEY = 'keyzbjKNgu52lb9D3';\nexport const CONF_AIRTABLE_BASE = 'appXv6ry7Vn262nGR';\nexport const CONF_AIRTABLE_TABLE_NAME = 'main';\n\nexport const MGXR_LS_AIRTABLE_API_KEY = 'mgxr_ls_airtable_api_key';\n","import _ from 'lodash';\nimport { MGXR_LS_AIRTABLE_API_KEY } from '../consts';\n\nexport class LSApiKey {\n  static apiKeyGet(): string | null {\n    return localStorage.getItem(MGXR_LS_AIRTABLE_API_KEY)\n  }\n\n  static apiKeySet(apiKey?: string): boolean {\n    if (isEmptyOrWhitespaces(apiKey)) {\n      return false\n    } else if (apiKey) {\n      localStorage.setItem(MGXR_LS_AIRTABLE_API_KEY, apiKey);\n      return true\n    }\n    return false\n  }\n}\n\nexport class TpCard {\n  constructor(\n    readonly title?: string,\n    readonly url?: string,\n    readonly comm?: string,\n    readonly body?: string,\n    readonly id?: string,\n    readonly tid?: string,\n    readonly trans_count: number = 0\n  ) {\n  }\n}\n\nexport const tpCards = [\n  new TpCard('Российская газета', 'https://rg.ru'),\n  new TpCard('Коммерсант', 'https://www.kommersant.ru/'),\n  new TpCard('РИА Новости', 'https://ria.ru/')\n]\n\n/**\n * Возвращает случайное число в диапазоне 0 .. (1) включая 0 и (1), но отсутствующее в (2).\n * Если такого случайного числа найти невозможно (из-за того что в (2) уже все индексы есть), то возвращает -1\n *\n * ID [[210219210500]], rev.2 1.1 2021-02-19\n *\n * @param ix (1) -- например 3\n * @param arrExcept -- например [0, 1]\n * @return например может вернуть только 2 или 3\n */\nexport function randomExcept(ix: number, arrExcept: [number]): number {\n  if (_.isEmpty(arrExcept)) {\n    return _.random(ix);\n  }\n  const arr0 = [];\n  for (let ix0 = 0; ix0 <= ix; ix0++) {\n    const b0 = arrExcept.some(el => el === ix0);\n    if (!b0) {\n      arr0.push(ix0)\n    }\n  }\n  if (arr0.length > (ix + 1) || arr0.length === 0) {\n    return -1\n  }\n  const rnd = _.random(arr0.length - 1);\n  return arr0[rnd];\n}\n\n/**\n * ID [210217114100], rev.1.0 2021-02-17\n */\nexport function isEmptyOrWhitespaces(str?: string) {\n  return (!str || str.length === 0 || /^\\s*$/.test(str))\n}\n\n","import Airtable from 'airtable';\nimport Record from 'airtable/lib/record';\nimport { CONF_AIRTABLE_BASE, CONF_AIRTABLE_TABLE_NAME } from '../consts';\nimport { LSApiKey } from '../utils/utils';\n\nexport class MAirtable {\n\n  static init() {\n    const apiKey = LSApiKey.apiKeyGet()\n    if (!apiKey) {\n      alert('please add \"Airtable API Key\" at \"Settings\"')\n    } else {\n      const dc = Airtable.default_config()\n      dc.apiKey = apiKey\n      dc.endpointUrl = 'https://api.airtable.com'\n      Airtable.configure(dc)\n    }\n  }\n\n  /**\n   *\n   * @param maxRecords -- максимальное количество записей которое нужно вернуть, задействуется если > 0\n   */\n  static async recordsGet(maxRecords: number = 0): Promise<Record[]> {\n    return new Promise((resolve, reject) => {\n      const ret: Record[] = [];\n      const selectCfg = {}\n      if (maxRecords > 0) {\n        // @ts-ignore\n        selectCfg.maxRecords = maxRecords\n      }\n      Airtable\n        .base(CONF_AIRTABLE_BASE)(CONF_AIRTABLE_TABLE_NAME)\n        .select(selectCfg)\n        .eachPage(\n          function page(records, fetchNextPage) {\n            records.forEach(function (record) {\n              ret.push(record)\n            });\n            fetchNextPage();\n          },\n          function done(err) {\n            if (err) {\n              console.error(err);\n              reject(err)\n            }\n            resolve(ret)\n          }\n        )\n    });\n  }\n\n  static async recordUpdate(tid: string, fields: any) {\n    console.log(`!!-!!-!! 0003-10 -> :::::::::::::: recordUpdate() {210222000258}:${Date.now()}`); // del+\n    console.log('!!-!!-!! 0003-20 tid {210222000307}\\n', tid); // del+\n    console.log('!!-!!-!! 0003-30 fields {210222000322}\\n', fields); // del+\n    return new Promise((resolve, reject) => {\n      const updOj = {id: tid, fields}\n      console.log('!!-!!-!! 0003-40 updOj {210222000414}\\n', updOj); // del+\n      Airtable\n        .base(CONF_AIRTABLE_BASE)(CONF_AIRTABLE_TABLE_NAME)\n        .update(\n          [updOj],\n          function (err: any, records: Record[] | undefined) {\n            if (err) {\n              reject(err);\n            }\n            resolve(records);\n          }\n        )\n    });\n  }\n}\n","import cards from './cards.json';\nimport { TpCard } from '../utils/utils';\nimport Record from 'airtable/lib/record';\nimport { MAirtable } from './airtable-api';\n\nexport class Cards {\n  static allGet(): TpCard[] {\n    // @ts-ignore\n    return cards.cards.map(el => {\n      return el\n    })\n  }\n\n  static countAllGet(): number {\n    return cards.cards.length\n  }\n\n  static getByIndex(index: number): TpCard {\n    // @ts-ignore\n    return cards.cards[index]\n  }\n}\n\nexport class CardsB {\n  private FIELD_ID = 'id';\n  private FIELD_TID = 'tid';\n  private FIELD_TITLE = 'title';\n  private FIELD_URL = 'url';\n  private FIELD_COMM = 'comm';\n  private FIELD_BODY = 'body';\n  public static FIELD_TRANS_COUNT = 'trans_count';\n\n  constructor(readonly records: Record[]) {\n  }\n\n  countAllGet(): number {\n    return this.records.length\n  }\n\n  getByIndex(index: number): TpCard {\n    const record = this.records[index]\n    return new TpCard(\n      record.get(this.FIELD_TITLE),\n      record.get(this.FIELD_URL),\n      record.get(this.FIELD_COMM),\n      record.get(this.FIELD_BODY),\n      record.get(this.FIELD_ID),\n      record.id,\n      record.get(CardsB.FIELD_TRANS_COUNT),\n    )\n  }\n\n  static async update(tid: string, card: TpCard) {\n    const fields = {\n      [CardsB.FIELD_TRANS_COUNT]: card.trans_count + 1\n    }\n    await MAirtable.recordUpdate(tid, fields)\n  }\n\n}\n","import { Component } from 'react';\nimport { Card } from '../Card';\nimport './styles.css'\nimport { TpCard } from '../../utils/utils';\nimport { CardsB } from '../../api/cards-api';\n\n\nexport class RandomCardViewer extends Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.cardHandleLinkClick.bind(this);\n  }\n\n  async cardHandleLinkClick(card: TpCard) {\n    await CardsB.update(card.tid || '', card);\n  }\n\n  render() {\n    return (<div className=\"rc-viewer\">\n      <div>Показано: {this.props.countShowed} / {this.props.countAll}</div>\n      <button className=\"rc-viewer__button\" onClick={this.props.handleShow}>Show</button>\n      {\n        this.props.card ?\n          <div className=\"rc-viewer__card\">\n            <Card\n              card={this.props.card}\n              handleLinkClick={this.cardHandleLinkClick}\n            />\n          </div>\n          : null\n      }\n    </div>);\n  }\n}\n","import React, { Component } from 'react';\nimport './styles.css'\nimport { LSApiKey } from '../../utils/utils';\nimport { MGXR_APP_REV } from '../../consts';\n\nexport class Settings extends Component<any, any> {\n  private textInput: React.RefObject<HTMLInputElement>;\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      apiKey: '',\n      isLoading: true\n    }\n    this.textInput = React.createRef();\n  }\n\n  componentDidMount() {\n    this.setState({\n      apiKey: LSApiKey.apiKeyGet(),\n      isLoading: false\n    })\n  }\n\n  handleSave() {\n    const val = this.textInput.current?.value\n    if (LSApiKey.apiKeySet(val)) {\n      this.setState({apiKey: val})\n      alert('saved')\n    } else {\n      alert('invalid value')\n    }\n  }\n\n  render() {\n    const {apiKey, isLoading} = this.state;\n    return (<div className=\"app__settings\">\n      <div>Версия приложения: {MGXR_APP_REV}</div>\n      <div>\n        <label>Airtable API Key: </label>\n        {isLoading ? <span className=\"settings__loading\">Loading ...</span>\n          :\n          (<span>\n          <input className=\"settings__input\" type=\"text\" ref={this.textInput} defaultValue={apiKey}/>\n          <button className=\"settings__button\" onClick={() => this.handleSave()}>Save</button>\n        </span>)\n        }\n      </div>\n    </div>)\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport { RandomCardViewer } from './components/RandomCardViewer';\nimport { LSApiKey, randomExcept } from './utils/utils';\nimport { CardsB } from './api/cards-api';\nimport { Link, Route, Router, Switch } from 'react-router-dom';\nimport { createBrowserHistory } from \"history\";\nimport { MAirtable } from './api/airtable-api';\nimport { Settings } from './components/Settings';\n\nconst customHistory = createBrowserHistory();\n\nMAirtable.init();\n\n\nclass App extends React.Component<any, any> {\n  private cardsB?: CardsB;\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      card: null,\n      countShowed: 0,\n      countAll: 0,\n      showedIxs: [],\n      isLoading: true,\n      isApiKeySetted: false,\n      errorStr: ''\n    }\n    this.do = this.do.bind(this);\n  }\n\n  handleShow() {\n    const rnd = randomExcept(this.state.countAll - 1, this.state.showedIxs);\n    if (rnd !== -1) {\n      const arr1 = [...this.state.showedIxs, rnd];\n      this.setState({\n        card: this.cardsB ? this.cardsB.getByIndex(rnd) : {},\n        countShowed: this.state.countShowed + 1,\n        showedIxs: arr1\n      })\n    }\n  }\n\n  do() {\n  }\n\n  async componentDidMount() {\n    const apiKey = LSApiKey.apiKeyGet()\n    if (apiKey) {\n      try {\n        this.setState({isApiKeySetted: true});\n        // ---\n        const records = await MAirtable.recordsGet();\n        this.cardsB = new CardsB(records);\n        this.setState({\n          isLoading: false,\n          countAll: this.cardsB.countAllGet()\n        });\n      } catch (err) {\n        if (err.statusCode === 401 && err.message.includes('provide valid api key')) {\n          this.setState({errorStr: 'invalid Airtable API Key'})\n        } else {\n          throw new Error(err);\n        }\n      }\n    }\n  }\n\n  render() {\n    const {isApiKeySetted, isLoading, errorStr} = this.state;\n    return (\n      <Router history={customHistory}>\n        <div className=\"App\">\n          <div className=\"appRoutes\">\n            <Link to=\"/mgxr\">Главная</Link>\n            <Link to=\"/settings\">Настройки</Link>\n          </div>\n          <Switch>\n            <Route path={[\"/\", \"/mgxr\"]} exact>\n              {\n                errorStr ? <div className=\"app__error_string\">{errorStr}</div>\n                  : isLoading ?\n                  (<div>\n                    {\n                      isApiKeySetted ?\n                        <div>Loading...</div> :\n                        <div>please provide \"Airtable API Key\" at \"Settings\"</div>\n                    }\n                  </div>)\n                  : <RandomCardViewer countAll={this.state.countAll} countShowed={this.state.countShowed}\n                                      card={this.state.card}\n                                      handleShow={() => this.handleShow()}/>\n              }\n            </Route>\n            <Route path=\"/settings\">\n              <Settings/>\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}