{"version":3,"sources":["components/Card/index.tsx","consts.ts","utils/utils.tsx","api/airtable-api.ts","api/cards-api.ts","components/RandomCardViewer/index.tsx","components/Settings/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DateFieldShow","name","dateSt","dayjs","diff","Card","props","handleLinkPress","bind","extend","relativeTime","isBetween","e","a","this","card","handleLinkClick","className","title","href","url","onClick","target","rel","comm","body","trans_count","trans_date_last","show_date_last","Component","CONF_AIRTABLE_BASE","CONF_AIRTABLE_TABLE_NAME","MGXR_LS_AIRTABLE_API_KEY","LSApiKey","localStorage","getItem","apiKey","str","length","test","setItem","TpCard","id","tid","randomExcept","ix","arrExcept","_","isEmpty","random","arr0","ix0","some","el","push","rnd","MAirtable","apiKeyGet","dc","Airtable","default_config","endpointUrl","configure","alert","maxRecords","Promise","resolve","reject","ret","selectCfg","base","select","eachPage","records","fetchNextPage","forEach","record","err","console","error","fields","log","Date","now","updOj","update","CardsB","FIELD_ID","FIELD_TID","FIELD_TITLE","FIELD_URL","FIELD_COMM","FIELD_BODY","index","get","FIELD_TRANS_COUNT","FIELD_TRANS_DATE_LAST","FIELD_SHOW_DATE_LAST","recordUpdate","RandomCardViewer","cardHandleLinkClick","card0","format","countShowed","countAll","handleShow","Settings","textInput","state","isLoading","React","createRef","setState","val","current","value","apiKeySet","type","ref","defaultValue","handleSave","customHistory","createBrowserHistory","init","App","cardsB","showedIxs","isApiKeySetted","errorStr","do","arr1","getByIndex","recordsGet","countAllGet","statusCode","message","includes","Error","history","to","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a38d9391.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './card.css';\nimport { TpCard } from '../../utils/utils';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport isBetween from 'dayjs/plugin/isBetween';\n\nexport interface CardProps {\n  card: TpCard,\n  handleLinkClick: (card: TpCard) => void\n}\n\nfunction DateFieldShow(name: string, dateSt?: string) {\n  return (<div>\n    {name}: {dateSt ?\n    (`${dateSt} (прошло дней: ${dayjs().diff(dateSt, 'day')})`)\n    : '-'}\n  </div>)\n}\n\nexport class Card extends Component<CardProps, any> {\n\n  constructor(props: CardProps) {\n    super(props);\n    this.handleLinkPress = this.handleLinkPress.bind(this);\n    dayjs.extend(relativeTime)\n    dayjs.extend(isBetween)\n  }\n\n  // @ts-ignore\n  async handleLinkPress(e) {\n    const {card, handleLinkClick} = this.props;\n    handleLinkClick(card);\n  }\n\n  render() {\n    const {card} = this.props;\n    if (!card) {\n      return <div>card is null</div>\n    }\n    // ---\n    return (<div className=\"card\">\n      <div className=\"card__title\">{card.title}</div>\n      <div className=\"card__link\">\n        <a\n          href={card.url}\n          onClick={this.handleLinkPress}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\">\n          {card.url}\n        </a>\n      </div>\n      <div>{card.comm}</div>\n      <div>{card.body}</div>\n      <div className=\"card__infos\">\n        <div>Число переходов: {card.trans_count}</div>\n        {DateFieldShow('Дата последнего перехода: ', card.trans_date_last)}\n        {DateFieldShow('Дата последнего показа: ', card.show_date_last)}\n      </div>\n    </div>);\n  }\n\n}\n","export const MGXR_APP_REV = '4';\n\nexport const CONF_AIRTABLE_API_KEY = 'keyzbjKNgu52lb9D3';\nexport const CONF_AIRTABLE_BASE = 'appXv6ry7Vn262nGR';\nexport const CONF_AIRTABLE_TABLE_NAME = 'main';\n\nexport const MGXR_LS_AIRTABLE_API_KEY = 'mgxr_ls_airtable_api_key';\n","import _ from 'lodash';\nimport { MGXR_LS_AIRTABLE_API_KEY } from '../consts';\n\nexport class LSApiKey {\n  static apiKeyGet(): string | null {\n    return localStorage.getItem(MGXR_LS_AIRTABLE_API_KEY)\n  }\n\n  static apiKeySet(apiKey?: string): boolean {\n    if (isEmptyOrWhitespaces(apiKey)) {\n      return false\n    } else if (apiKey) {\n      localStorage.setItem(MGXR_LS_AIRTABLE_API_KEY, apiKey);\n      return true\n    }\n    return false\n  }\n}\n\nexport class TpCard {\n  constructor(\n    readonly title?: string,\n    readonly url?: string,\n    readonly comm?: string,\n    readonly body?: string,\n    readonly id?: string,\n    readonly tid?: string,\n    readonly trans_count: number = 0,\n    readonly trans_date_last?: string,\n    readonly show_date_last?: string,\n  ) {\n  }\n}\n\nexport const tpCards = [\n  new TpCard('Российская газета', 'https://rg.ru'),\n  new TpCard('Коммерсант', 'https://www.kommersant.ru/'),\n  new TpCard('РИА Новости', 'https://ria.ru/')\n]\n\n/**\n * Возвращает случайное число в диапазоне 0 .. (1) включая 0 и (1), но отсутствующее в (2).\n * Если такого случайного числа найти невозможно (из-за того что в (2) уже все индексы есть), то возвращает -1\n *\n * ID [[210219210500]], rev.2 1.1 2021-02-19\n *\n * @param ix (1) -- например 3\n * @param arrExcept -- например [0, 1]\n * @return например может вернуть только 2 или 3\n */\nexport function randomExcept(ix: number, arrExcept: [number]): number {\n  if (_.isEmpty(arrExcept)) {\n    return _.random(ix);\n  }\n  const arr0 = [];\n  for (let ix0 = 0; ix0 <= ix; ix0++) {\n    const b0 = arrExcept.some(el => el === ix0);\n    if (!b0) {\n      arr0.push(ix0)\n    }\n  }\n  if (arr0.length > (ix + 1) || arr0.length === 0) {\n    return -1\n  }\n  const rnd = _.random(arr0.length - 1);\n  return arr0[rnd];\n}\n\n/**\n * ID [210217114100], rev.1.0 2021-02-17\n */\nexport function isEmptyOrWhitespaces(str?: string) {\n  return (!str || str.length === 0 || /^\\s*$/.test(str))\n}\n\n","import Airtable from 'airtable';\nimport Record from 'airtable/lib/record';\nimport { CONF_AIRTABLE_BASE, CONF_AIRTABLE_TABLE_NAME } from '../consts';\nimport { LSApiKey } from '../utils/utils';\n\nexport class MAirtable {\n\n  static init() {\n    const apiKey = LSApiKey.apiKeyGet()\n    if (!apiKey) {\n      alert('please add \"Airtable API Key\" at \"Settings\"')\n    } else {\n      const dc = Airtable.default_config()\n      dc.apiKey = apiKey\n      dc.endpointUrl = 'https://api.airtable.com'\n      Airtable.configure(dc)\n    }\n  }\n\n  /**\n   *\n   * @param maxRecords -- максимальное количество записей которое нужно вернуть, задействуется если > 0\n   */\n  static async recordsGet(maxRecords: number = 0): Promise<Record[]> {\n    return new Promise((resolve, reject) => {\n      const ret: Record[] = [];\n      const selectCfg = {}\n      if (maxRecords > 0) {\n        // @ts-ignore\n        selectCfg.maxRecords = maxRecords\n      }\n      Airtable\n        .base(CONF_AIRTABLE_BASE)(CONF_AIRTABLE_TABLE_NAME)\n        .select(selectCfg)\n        .eachPage(\n          function page(records, fetchNextPage) {\n            records.forEach(function (record) {\n              ret.push(record)\n            });\n            fetchNextPage();\n          },\n          function done(err) {\n            if (err) {\n              console.error(err);\n              reject(err)\n            }\n            resolve(ret)\n          }\n        )\n    });\n  }\n\n  static async recordUpdate(tid: string, fields: any) {\n    console.log(`!!-!!-!! 0003-10 -> :::::::::::::: recordUpdate() {210222000258}:${Date.now()}`); // del+\n    console.log('!!-!!-!! 0003-20 tid {210222000307}\\n', tid); // del+\n    console.log('!!-!!-!! 0003-30 fields {210222000322}\\n', fields); // del+\n    return new Promise((resolve, reject) => {\n      const updOj = {id: tid, fields}\n      console.log('!!-!!-!! 0003-40 updOj {210222000414}\\n', updOj); // del+\n      Airtable\n        .base(CONF_AIRTABLE_BASE)(CONF_AIRTABLE_TABLE_NAME)\n        .update(\n          [updOj],\n          function (err: any, records: Record[] | undefined) {\n            if (err) {\n              reject(err);\n            }\n            resolve(records);\n          }\n        )\n    });\n  }\n}\n","import cards from './cards.json';\nimport { TpCard } from '../utils/utils';\nimport Record from 'airtable/lib/record';\nimport { MAirtable } from './airtable-api';\nimport dayjs from 'dayjs';\n\nexport class Cards {\n  static allGet(): TpCard[] {\n    // @ts-ignore\n    return cards.cards.map(el => {\n      return el\n    })\n  }\n\n  static countAllGet(): number {\n    return cards.cards.length\n  }\n\n  static getByIndex(index: number): TpCard {\n    // @ts-ignore\n    return cards.cards[index]\n  }\n}\n\nexport class CardsB {\n  private FIELD_ID = 'id';\n  private FIELD_TID = 'tid';\n  private FIELD_TITLE = 'title';\n  private FIELD_URL = 'url';\n  private FIELD_COMM = 'comm';\n  private FIELD_BODY = 'body';\n  public static FIELD_TRANS_COUNT = 'trans_count';\n  // type - Date\n  public static FIELD_TRANS_DATE_LAST = 'trans_date_last';\n  public static FIELD_SHOW_DATE_LAST = 'show_date_last';\n\n  constructor(readonly records: Record[]) {\n  }\n\n  countAllGet(): number {\n    return this.records.length\n  }\n\n  // [[210222111416]]\n  getByIndex(index: number): TpCard {\n    const record = this.records[index]\n    return new TpCard(\n      record.get(this.FIELD_TITLE),\n      record.get(this.FIELD_URL),\n      record.get(this.FIELD_COMM),\n      record.get(this.FIELD_BODY),\n      record.get(this.FIELD_ID),\n      record.id,\n      record.get(CardsB.FIELD_TRANS_COUNT),\n      record.get(CardsB.FIELD_TRANS_DATE_LAST),\n      record.get(CardsB.FIELD_SHOW_DATE_LAST),\n    )\n  }\n\n  static async update(tid: string, card: TpCard) {\n    const fields = {\n      [CardsB.FIELD_TRANS_COUNT]: card.trans_count + 1,\n      [CardsB.FIELD_TRANS_DATE_LAST]: card.trans_date_last,\n      [CardsB.FIELD_SHOW_DATE_LAST]: card.show_date_last,\n    }\n    await MAirtable.recordUpdate(tid, fields)\n  }\n\n}\n","import { Component } from 'react';\nimport { Card } from '../Card';\nimport './styles.css'\nimport { TpCard } from '../../utils/utils';\nimport { CardsB } from '../../api/cards-api';\nimport dayjs from 'dayjs';\n\n\nexport class RandomCardViewer extends Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.cardHandleLinkClick.bind(this);\n  }\n\n  async cardHandleLinkClick(card: TpCard) {\n    const card0 = {\n      ...card,\n      [CardsB.FIELD_TRANS_DATE_LAST]: dayjs(Date.now()).format('YYYY-MM-DD')\n    }\n    console.log('!!-!!-!! card0 {210222120706}\\n', card0); // del+\n    await CardsB.update(card.tid || '', card0);\n  }\n\n  render() {\n    return (<div className=\"rc-viewer\">\n      <div>Показано: {this.props.countShowed} / {this.props.countAll}</div>\n      <button className=\"rc-viewer__button\" onClick={this.props.handleShow}>Show</button>\n      {\n        this.props.card ?\n          <div className=\"rc-viewer__card\">\n            <Card\n              card={this.props.card}\n              handleLinkClick={this.cardHandleLinkClick}\n            />\n          </div>\n          : null\n      }\n    </div>);\n  }\n}\n","import React, { Component } from 'react';\nimport './styles.css'\nimport { LSApiKey } from '../../utils/utils';\nimport { MGXR_APP_REV } from '../../consts';\n\nexport class Settings extends Component<any, any> {\n  private textInput: React.RefObject<HTMLInputElement>;\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      apiKey: '',\n      isLoading: true\n    }\n    this.textInput = React.createRef();\n  }\n\n  componentDidMount() {\n    this.setState({\n      apiKey: LSApiKey.apiKeyGet(),\n      isLoading: false\n    })\n  }\n\n  handleSave() {\n    const val = this.textInput.current?.value\n    if (LSApiKey.apiKeySet(val)) {\n      this.setState({apiKey: val})\n      alert('saved')\n    } else {\n      alert('invalid value')\n    }\n  }\n\n  render() {\n    const {apiKey, isLoading} = this.state;\n    return (<div className=\"app__settings\">\n      <div>Версия приложения: {MGXR_APP_REV}</div>\n      <div>\n        <label>Airtable API Key: </label>\n        {isLoading ? <span className=\"settings__loading\">Loading ...</span>\n          :\n          (<span>\n          <input className=\"settings__input\" type=\"text\" ref={this.textInput} defaultValue={apiKey}/>\n          <button className=\"settings__button\" onClick={() => this.handleSave()}>Save</button>\n        </span>)\n        }\n      </div>\n    </div>)\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport { RandomCardViewer } from './components/RandomCardViewer';\nimport { LSApiKey, randomExcept, TpCard } from './utils/utils';\nimport { CardsB } from './api/cards-api';\nimport { Link, Route, Router, Switch } from 'react-router-dom';\nimport { createBrowserHistory } from \"history\";\nimport { MAirtable } from './api/airtable-api';\nimport { Settings } from './components/Settings';\nimport { isEmpty as _isEmpty } from 'lodash';\nimport dayjs from 'dayjs';\n\nconst customHistory = createBrowserHistory();\n\nMAirtable.init();\n\n\nclass App extends React.Component<any, any> {\n  private cardsB?: CardsB;\n\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      card: null,\n      countShowed: 0,\n      countAll: 0,\n      showedIxs: [],\n      isLoading: true,\n      isApiKeySetted: false,\n      errorStr: ''\n    }\n    this.do = this.do.bind(this);\n  }\n\n  async handleShow() {\n    const rnd = randomExcept(this.state.countAll - 1, this.state.showedIxs);\n    if (rnd !== -1) {\n      const arr1 = [...this.state.showedIxs, rnd];\n      if (this.cardsB) {\n        const card: TpCard = this.cardsB.getByIndex(rnd);\n        this.setState({\n          card,\n          countShowed: this.state.countShowed + 1,\n          showedIxs: arr1\n        })\n        // ---\n        const card0 = {...card, [CardsB.FIELD_SHOW_DATE_LAST]: dayjs().format('YYYY-MM-DD')};\n        console.log('!!-!!-!! card0 {210222121922}\\n', card0); // del+\n        await CardsB.update(card.tid || '', card0);\n      }\n    }\n  }\n\n  do() {\n  }\n\n  async componentDidMount() {\n    const apiKey = LSApiKey.apiKeyGet()\n    if (apiKey) {\n      try {\n        this.setState({isApiKeySetted: true});\n        // ---\n        // [[210222113321]]\n        const records = await MAirtable.recordsGet();\n        this.cardsB = new CardsB(records);\n        this.setState({\n          isLoading: false,\n          countAll: this.cardsB.countAllGet()\n        });\n      } catch (err) {\n        if (err.statusCode === 401 && err.message.includes('provide valid api key')) {\n          this.setState({errorStr: 'invalid Airtable API Key'})\n        } else {\n          throw new Error(err);\n        }\n      }\n    }\n  }\n\n  render() {\n    const {isApiKeySetted, isLoading, errorStr} = this.state;\n    return (\n      <Router history={customHistory}>\n        <div className=\"App\">\n          <div className=\"appRoutes\">\n            <Link to=\"/mgxr\">Главная</Link>\n            <Link to=\"/settings\">Настройки</Link>\n          </div>\n          <Switch>\n            <Route path={[\"/\", \"/mgxr\"]} exact>\n              {\n                errorStr ? <div className=\"app__error_string\">{errorStr}</div>\n                  : isLoading ?\n                  (<div>\n                    {\n                      isApiKeySetted ?\n                        <div>Loading...</div> :\n                        <div>please provide \"Airtable API Key\" at \"Settings\"</div>\n                    }\n                  </div>)\n                  : <RandomCardViewer countAll={this.state.countAll} countShowed={this.state.countShowed}\n                                      card={this.state.card}\n                                      handleShow={() => this.handleShow()}/>\n              }\n            </Route>\n            <Route path=\"/settings\">\n              <Settings/>\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}